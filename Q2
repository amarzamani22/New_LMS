# extract_q2_staging.py
from __future__ import annotations
import argparse, re, time
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import pandas as pd
from openpyxl import load_workbook

# =========================
# Config (tune here)
# =========================

# Likely data sheets
LIKELY_DATA_SHEETS = [
    "Banking & DFI", "Banking & DFI ", "Banking & DFI  ",
    "Insurance/Takaful", "Insurance & Takaful", "Data"
]

# Cover cells (fallbacks handled automatically)
COVER_CELLS = {"entity": "F6", "year": "F7", "quarter": "F8"}

# Months per quarter -> staging column names
MONTHS_BY_Q = {
    "Quarter 1": ["Jan", "Feb", "Mar"],
    "Quarter 2": ["Apr", "May", "Jun"],
    "Quarter 3": ["Jul", "Aug", "Sep"],
    "Quarter 4": ["Oct", "Nov", "Dec"],
    "Q1": ["Jan", "Feb", "Mar"],
    "Q2": ["Apr", "May", "Jun"],
    "Q3": ["Jul", "Aug", "Sep"],
    "Q4": ["Oct", "Nov", "Dec"],
}

# In Q2 tables, the three month input columns are always C/D/E
MONTH_COLS = ["C", "D", "E"]

# Master worker categories as they appear in column A
WORKER_CATEGORIES = [
    "Managers",
    "Professional",
    "Technicians & Associate Professionals",
    "Clerical Occupations",
    "Operative Workers",
    "Elementary Occupations",
    "TOTAL Salary & Wages",            # appears in the first block
    "TOTAL Basic Salary & Wages",
    "TOTAL Arrears to Basic Salary & Wages",
    "TOTAL Bonus",
    "TOTAL Others (overtime, COLA, allowance, etc.)",
    "TOTAL Commissions Paid At Least Once a Month (RM)",
]

# Q2A sub-sections (label in col A → subquestion name)
Q2A_BLOCKS = [
    ("Salary & Wages = A + B + C + D + E", "Salary & Wages = A+B+C+D+E"),
    ("A. Basic Salary & Wages",            "A. Basic Salary & Wages"),
    ("B. Arrears to Basic Salary & Wages", "B. Arrears to Basic Salary & Wages"),
    ("C. Bonus",                           "C. Bonus"),
    ("D. Others (overtime, COLA, allowance, etc.)", "D. Others (overtime, COLA, allowance, etc.)"),
    ("E. Commissions Paid At Least Once a Month (RM)", "E. Commissions Paid At Least Once a Month (RM)"),
]

# Job function headers (Q4 expansions)
JOB_FUNCTIONS = [
    "Banking Operations", "Compliance", "Corporate Banking", "Credit Management",
    "Digital Banking & Innovation", "Finance", "Human Resources", "Information Technology",
    "Internal Audit", "Investment Banking", "Legal", "Retail Banking", "Risk Management",
    "Sales and Marketing", "Shariah", "Treasury", "Other functions"
]

# Q2B sub-sections (Islamic Banking Scheme only)
Q2B_BLOCKS = [
    ("A. Salary & Wages", "A. Salary & Wages"),
    ("B. Commissions Paid At Least Once a Month (RM)", "B. Commissions Paid At Least Once a Month (RM)"),
]


# =========================
# Helpers
# =========================

def _norm(s: object) -> str:
    if s is None: return ""
    s = str(s).replace("&", " and ")
    keep = "abcdefghijklmnopqrstuvwxyz0123456789()+/.:; -"
    out = "".join(ch.lower() if ch.lower() in keep else " " for ch in s)
    return re.sub(r"\s+", " ", out).strip()

def _equals(a: object, b: str) -> bool:
    return _norm(a) == _norm(b)

@dataclass
class CoverMeta:
    entity: Optional[str]
    year: Optional[int]
    quarter_label: Optional[str]

def read_cover_meta(wb) -> CoverMeta:
    ent = yr = ql = None
    if "Cover" in wb.sheetnames:
        ws = wb["Cover"]
        try:
            ent = ws[COVER_CELLS["entity"]].value
            yr  = ws[COVER_CELLS["year"]].value
            ql  = ws[COVER_CELLS["quarter"]].value
        except Exception:
            pass
    if not ent or not yr or not ql:
        for s in wb.sheetnames[:3]:
            if s == "Cover": continue
            ws = wb[s]
            try:
                ent = ent or ws["C6"].value
                yr  = yr  or ws["C7"].value
                ql  = ql  or ws["C8"].value
            except Exception:
                continue
    try:
        yr = int(str(yr).strip()) if yr is not None else None
    except Exception:
        yr = None
    ent = str(ent).strip() if ent else None
    ql  = str(ql).strip() if ql else None
    return CoverMeta(ent, yr, ql)

def pick_data_sheet(wb) -> str:
    names_norm = {_norm(s): s for s in wb.sheetnames}
    for want in LIKELY_DATA_SHEETS:
        key = _norm(want)
        if key in names_norm:
            return names_norm[key]
    for s in wb.sheetnames:
        if s != "Cover": return s
    return wb.sheetnames[0]

def read_number(ws, addr: str) -> float:
    try:
        v = ws[addr].value
    except Exception:
        return 0.0
    if v in (None, "", "-"): return 0.0
    try:
        return float(v)
    except Exception:
        try:
            return float(str(v).replace(",", ""))
        except Exception:
            return 0.0

def find_row(ws, target_text: str, col: int = 1) -> Optional[int]:
    tgt = _norm(target_text)
    for r in range(1, ws.max_row + 1):
        if _norm(ws.cell(r, col).value) == tgt:
            return r
    return None


# =========================
# Extraction – Q2A main (monthly)
# =========================

def extract_q2a_main(ws, meta: CoverMeta) -> pd.DataFrame:
    months = MONTHS_BY_Q.get(meta.quarter_label or "", [])
    if len(months) != 3:  # need the three month labels for the quarter
        return pd.DataFrame()

    out_rows: List[Dict] = []

    # For each sub-section: scan downwards from the anchor until the next sub-section anchor.
    # Capture rows whose column A matches any expected worker category or TOTAL line.
    anchors = [b[0] for b in Q2A_BLOCKS]
    anchor_rows: Dict[str, int] = {}
    for label, _alias in Q2A_BLOCKS:
        r = find_row(ws, label)
        if r: anchor_rows[label] = r
    if not anchor_rows:
        return pd.DataFrame()

    # Build an ordered list of (label, row) sorted by row
    ordered = sorted([(lbl, r) for lbl, r in anchor_rows.items()], key=lambda x: x[1])

    for idx, (label, start_r) in enumerate(ordered):
        subquestion = dict(Q2A_BLOCKS)[label]
        end_r = ordered[idx + 1][1] if idx + 1 < len(ordered) else min(ws.max_row, start_r + 120)

        r = start_r + 1
        while r < end_r:
            a_val = ws.cell(r, 1).value
            a_norm = _norm(a_val)
            if a_norm in [_norm(w) for w in WORKER_CATEGORIES]:
                v1 = read_number(ws, f"{MONTH_COLS[0]}{r}")
                v2 = read_number(ws, f"{MONTH_COLS[1]}{r}")
                v3 = read_number(ws, f"{MONTH_COLS[2]}{r}")
                out_rows.append({
                    "entity_name": meta.entity,
                    "year": meta.year,
                    "quarter": meta.quarter_label,
                    "question": "Q2A",
                    "subquestion": subquestion,
                    "worker_category": str(a_val).strip(),
                    months[0]: v1, months[1]: v2, months[2]: v3,
                })
            r += 1

    return pd.DataFrame(out_rows)


# =========================
# Extraction – Q2A Q4 Job functions
# =========================

def extract_q2a_jobfunc_q4(ws, meta: CoverMeta) -> pd.DataFrame:
    q = (meta.quarter_label or "").upper()
    if q not in ("Q4", "QUARTER 4"):
        return pd.DataFrame()

    # Find the row that contains most job-function headers
    header_row = None
    best_hits = 0
    for r in range(1, ws.max_row + 1):
        row_vals = [_norm(ws.cell(r, c).value) for c in range(1, ws.max_column + 1)]
        hits = sum(1 for jf in JOB_FUNCTIONS if _norm(jf) in row_vals)
        if hits > best_hits:
            best_hits, header_row = hits, r
        if hits >= max(6, len(JOB_FUNCTIONS)//2):
            break
    if not header_row:
        return pd.DataFrame()

    # Map job function -> column index
    jf_cols: Dict[str, int] = {}
    for c in range(1, ws.max_column + 1):
        txt = ws.cell(header_row, c).value
        for jf in JOB_FUNCTIONS:
            if _equals(txt, jf) and jf not in jf_cols:
                jf_cols[jf] = c
    if not jf_cols:
        return pd.DataFrame()

    # As we scan down, detect the *current sub-section* by seeing
    # the section headers again in column A.
    section_labels = { _norm(a): name for a, name in Q2A_BLOCKS }
    out_rows: List[Dict] = []
    current_subq: Optional[str] = None
    end_scan = min(ws.max_row, header_row + 220)  # reasonable window

    for r in range(header_row + 1, end_scan + 1):
        colA = ws.cell(r, 1).value
        a_norm = _norm(colA)

        # Section heading encountered?
        if a_norm in section_labels:
            current_subq = section_labels[a_norm]
            continue

        # Worker category line?
        if a_norm in [_norm(w) for w in WORKER_CATEGORIES]:
            wc = str(colA).strip()
            for jf, cidx in jf_cols.items():
                raw = ws.cell(r, cidx).value
                try:
                    v = 0.0 if raw in (None, "", "-") else float(str(raw).replace(",", ""))
                except Exception:
                    v = 0.0
                out_rows.append({
                    "entity_name": meta.entity,
                    "year": meta.year,
                    "quarter": meta.quarter_label,
                    "question": "Q2A",
                    "subquestion": current_subq or "",
                    "worker_category": wc,
                    "job_function": jf,
                    "value": v,
                })

    return pd.DataFrame(out_rows)


# =========================
# Extraction – Q2B (Islamic ops, Q2 & Q4)
# =========================

def extract_q2b(ws, meta: CoverMeta) -> pd.DataFrame:
    q = (meta.quarter_label or "").strip()
    if q not in ("Quarter 2", "Quarter 4", "Q2", "Q4"):
        return pd.DataFrame()

    months = MONTHS_BY_Q.get(q, [])
    if not months:
        return pd.DataFrame()

    # Locate "Question 2B:" block
    q2b_anchor = find_row(ws, "Question 2B:")
    if not q2b_anchor:
        return pd.DataFrame()

    # For each sub-section under 2B, scan worker categories until the next sub-section.
    # (Layout mirrors Q1B approach)
    anchors: Dict[str, int] = {}
    for label, _name in Q2B_BLOCKS:
        # find the first occurrence AFTER the Q2B header
        r = None
        for rr in range(q2b_anchor, min(ws.max_row, q2b_anchor + 200)):
            if _equals(ws.cell(rr, 1).value, label):
                r = rr
                break
        if r:
            anchors[label] = r
    if not anchors:
        return pd.DataFrame()

    ordered = sorted([(lbl, r) for lbl, r in anchors.items()], key=lambda x: x[1])
    out_rows: List[Dict] = []

    for idx, (label, start_r) in enumerate(ordered):
        subq = dict(Q2B_BLOCKS)[label]
        end_r = ordered[idx + 1][1] if idx + 1 < len(ordered) else min(ws.max_row, start_r + 100)

        r = start_r + 1
        while r < end_r:
            a_val = ws.cell(r, 1).value
            a_norm = _norm(a_val)
            if a_norm in [_norm(w) for w in WORKER_CATEGORIES]:
                v1 = read_number(ws, f"{MONTH_COLS[0]}{r}")
                v2 = read_number(ws, f"{MONTH_COLS[1]}{r}")
                v3 = read_number(ws, f"{MONTH_COLS[2]}{r}")
                out_rows.append({
                    "entity_name": meta.entity,
                    "year": meta.year,
                    "quarter": meta.quarter_label,
                    "question": "Q2B",
                    "subquestion": subq,
                    "worker_category": str(a_val).strip(),
                    months[0]: v1 if len(months) > 0 else 0.0,
                    months[1]: v2 if len(months) > 1 else 0.0,
                    months[2]: v3 if len(months) > 2 else 0.0,
                })
            r += 1

    return pd.DataFrame(out_rows)


# =========================
# File driver
# =========================

def extract_q2_from_file(path: Path, verbose: bool=False) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    try:
        wb = load_workbook(str(path), data_only=True, read_only=True)
    except Exception as e:
        if verbose: print(f"[ERROR] open {path.name}: {e}")
        return (pd.DataFrame(), pd.DataFrame(), pd.DataFrame())

    meta = read_cover_meta(wb)
    if not meta.entity or not meta.year or not meta.quarter_label:
        if verbose: print(f"[WARN] {path.name}: missing cover meta; skipping.")
        try: wb.close()
        except Exception: pass
        return (pd.DataFrame(), pd.DataFrame(), pd.DataFrame())

    ws = wb[pick_data_sheet(wb)]

    df_a  = extract_q2a_main(ws, meta)
    df_jf = extract_q2a_jobfunc_q4(ws, meta)
    df_b  = extract_q2b(ws, meta)

    try: wb.close()
    except Exception: pass
    return (df_a, df_jf, df_b)


# =========================
# CLI
# =========================

def main() -> int:
    ap = argparse.ArgumentParser(description="Extract RLMS Question 2 (2A + 2B) into staging workbook.")
    ap.add_argument("--inputs", required=True, help="Folder with submissions (.xlsx/.xlsm)")
    ap.add_argument("--out",    required=True, help="Output staging workbook (.xlsx)")
    ap.add_argument("--limit",  type=int, default=None, help="Limit files (debug)")
    ap.add_argument("--verbose", action="store_true")
    args = ap.parse_args()

    root = Path(args.inputs)
    if not root.exists():
        print(f"[ERROR] Folder not found: {root}")
        return 2

    files: List[Path] = []
    for ext in ("*.xlsx", "*.xlsm"):
        files.extend(p for p in root.rglob(ext) if not p.name.startswith("~$"))
    files.sort()
    if args.limit:
        files = files[:args.limit]
    print(f"[INFO] Files to scan: {len(files)}")

    t0 = time.perf_counter()
    rows_a, rows_jf, rows_b = [], [], []

    for i, p in enumerate(files, 1):
        a, jf, b = extract_q2_from_file(p, verbose=args.verbose)
        if not a.empty:  rows_a.append(a)
        if not jf.empty: rows_jf.append(jf)
        if not b.empty:  rows_b.append(b)
        if args.verbose and i % 25 == 0:
            print(f"  processed {i}/{len(files)}")

    df_a  = pd.concat(rows_a,  ignore_index=True) if rows_a  else pd.DataFrame()
    df_jf = pd.concat(rows_jf, ignore_index=True) if rows_jf else pd.DataFrame()
    df_b  = pd.concat(rows_b,  ignore_index=True) if rows_b  else pd.DataFrame()

    # Sort for readability
    def _sort(df: pd.DataFrame) -> pd.DataFrame:
        if df.empty: return df
        order_cols = [c for c in ["entity_name","year","quarter","question","subquestion","worker_category","job_function"] if c in df.columns]
        month_cols = [c for c in ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"] if c in df.columns]
        return df.sort_values(order_cols + month_cols, kind="mergesort").reset_index(drop=True)

    df_a  = _sort(df_a)
    df_jf = _sort(df_jf)
    df_b  = _sort(df_b)

    out_path = Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    with pd.ExcelWriter(out_path, engine="openpyxl") as xw:
        if not df_a.empty:  df_a.to_excel(xw, index=False, sheet_name="Q2A_Main")
        if not df_jf.empty: df_jf.to_excel(xw, index=False, sheet_name="Q2A_JobFunc_Q4")
        if not df_b.empty:  df_b.to_excel(xw, index=False, sheet_name="Q2B")

    print(f"[DONE] Wrote staging → {out_path}")
    print(f"[TIMER] {time.perf_counter() - t0:0.2f}s")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
