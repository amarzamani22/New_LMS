from __future__ import annotations
import argparse, time
from pathlib import Path
from typing import Dict, List, Tuple

import pandas as pd
from openpyxl import load_workbook

# -----------------------------------
# Config (same style as Q1–Q4 scripts)
# -----------------------------------

LIKELY_DATA_SHEETS = [
    "Banking & DFI", "Banking & DFI ", "Banking & DFI  ",
    "Insurance/Takaful", "Insurance & Takaful", "Data"
]

COVER_CELLS = {"entity": "F6", "year": "F7", "quarter": "F8"}

# Month names by quarter label (works with "Quarter 4" or "Q4")
MONTHS_BY_Q: Dict[str, List[str]] = {
    "Quarter 1": ["Jan", "Feb", "Mar"],
    "Quarter 2": ["Apr", "May", "Jun"],
    "Quarter 3": ["Jul", "Aug", "Sep"],
    "Quarter 4": ["Oct", "Nov", "Dec"],
    "Q1": ["Jan", "Feb", "Mar"],
    "Q2": ["Apr", "May", "Jun"],
    "Q3": ["Jul", "Aug", "Sep"],
    "Q4": ["Oct", "Nov", "Dec"],
}

# Q5 layout (fixed). Each tuple: (subquestion_header_cell, first_worker_row, last_worker_row_inclusive)
# Data are always in columns C, D, E for M1..M3.
Q5_BLOCKS: List[Tuple[str, int, int]] = [
    ("A214", 215, 221),  # New Hires and Recalls
    ("A223", 224, 229)   ,  # Separations = A + B + C
    ("A230", 231, 237)   ,  # A. Quits and Resignations (except retirements)
    ("A238", 239, 244)   ,  # B. Total Layoffs and Discharges
    ("A246", 247, 253)   ,  # B(i). Layoffs and Discharges: of which; VSS/MSS
    ("A255", 256, 261),     # C. Other Separations
]

# ----------------
# Helper functions
# ----------------

def read_cover_meta(wb) -> Tuple[str, int, str]:
    """Return (entity, year, quarter_label)."""
    ent = yr = q = None
    if "Cover" in wb.sheetnames:
        ws = wb["Cover"]
        ent = ws[COVER_CELLS["entity"]].value
        yr  = ws[COVER_CELLS["year"]].value
        q   = ws[COVER_CELLS["quarter"]].value
    ent = (str(ent).strip() if ent is not None else None)
    try:
        yr = int(str(yr).strip()) if yr is not None else None
    except Exception:
        yr = None
    q = (str(q).strip() if q is not None else None)
    return ent, yr, q

def pick_data_sheet(wb) -> str:
    names_norm = { s.strip().lower(): s for s in wb.sheetnames }
    for want in LIKELY_DATA_SHEETS:
        key = want.strip().lower()
        if key in names_norm:
            return names_norm[key]
    # otherwise the first non-cover
    for s in wb.sheetnames:
        if s != "Cover":
            return s
    return wb.sheetnames[0]

def read_num(ws, addr: str) -> float:
    v = ws[addr].value
    if v in (None, "", "-"):
        return 0.0
    try:
        return float(v)
    except Exception:
        try:
            return float(str(v).replace(",", ""))
        except Exception:
            return 0.0

# -------------
# Core extractor
# -------------

def extract_q5_from_file(path: Path) -> pd.DataFrame:
    try:
        wb = load_workbook(str(path), data_only=True, read_only=True)
    except Exception:
        return pd.DataFrame()

    ent, yr, qlbl = read_cover_meta(wb)
    if not ent or not yr or not qlbl:
        try: wb.close()
        except Exception: pass
        return pd.DataFrame()

    months = MONTHS_BY_Q.get(qlbl, [])
    if len(months) != 3:
        try: wb.close()
        except Exception: pass
        return pd.DataFrame()

    ws = wb[pick_data_sheet(wb)]
    rows: List[Dict] = []

    for hdr_cell, r1, rN in Q5_BLOCKS:
        subq = ws[hdr_cell].value
        subq = str(subq).strip() if subq is not None else ""
        # Fixed columns C/D/E → month 1/2/3
        for r in range(r1, rN + 1):
            wc = ws.cell(r, 1).value  # column A
            wc = "" if wc is None else str(wc).strip()
            # Skip completely empty label rows (just in case)
            if wc == "":
                continue
            v1 = read_num(ws, f"C{r}")
            v2 = read_num(ws, f"D{r}")
            v3 = read_num(ws, f"E{r}")
            rows.append({
                "entity_name": ent,
                "year": yr,
                "quarter": qlbl,
                "question": "Q5",
                "subquestion": subq,
                "worker_category": wc,
                months[0]: v1,
                months[1]: v2,
                months[2]: v3,
            })

    try: wb.close()
    except Exception: pass

    return pd.DataFrame(rows)

# ----
# CLI
# ----

def main() -> int:
    ap = argparse.ArgumentParser(description="Extract RLMS Question 5 (Labour Turnover) into a staging workbook.")
    ap.add_argument("--input", required=True, help="Folder with submissions (.xlsx/.xlsm)")
    ap.add_argument("--out", required=True, help="Output staging workbook (.xlsx)")
    ap.add_argument("--limit", type=int, default=None, help="Limit files processed (debug)")
    args = ap.parse_args()

    root = Path(args.input)
    if not root.exists():
        print(f"[ERROR] Folder not found: {root}")
        return 2

    files: List[Path] = []
    for ext in ("*.xlsx", "*.xlsm"):
        files.extend(p for p in root.rglob(ext) if not p.name.startswith("~$"))
    files.sort()
    if args.limit:
        files = files[:args.limit]
    print(f"[INFO] Files: {len(files)}")

    t0 = time.perf_counter()
    frames: List[pd.DataFrame] = []
    for p in files:
        df = extract_q5_from_file(p)
        if not df.empty:
            frames.append(df)

    out = pd.concat(frames, ignore_index=True) if frames else pd.DataFrame(
        columns=["entity_name","year","quarter","question","subquestion","worker_category","M1","M2","M3"]
    )

    # Sort for readability
    if not out.empty:
        mcols = [c for c in ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"] if c in out.columns]
        out = out.sort_values(["entity_name","year","quarter","subquestion","worker_category"] + mcols, kind="mergesort")

    out_path = Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    with pd.ExcelWriter(out_path, engine="openpyxl") as xw:
        out.to_excel(xw, index=False, sheet_name="Q5")

    print(f"[DONE] Wrote → {out_path}")
    print(f"[TIMER] {time.perf_counter() - t0:0.2f}s")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
