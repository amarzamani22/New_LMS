# qc_q2.py
from __future__ import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import write_qc_sheet, new_workbook_with_about, normalize_quarter_label, months_up_to_quarter

def load(path: Path, sheet: str) -> pd.DataFrame:
    try: return pd.read_excel(path, sheet_name=sheet, engine="openpyxl")
    except Exception: return pd.DataFrame()

def main() -> int:
    ap = argparse.ArgumentParser(description="QC for Question 2 (A Main, A Job Function, B) from staging.")
    ap.add_argument("--stage", required=True)
    ap.add_argument("--out", required=True)
    ap.add_argument("--prior-stage", default=None)
    ap.add_argument("--year", type=int, default=None)
    args = ap.parse_args()

    stage = Path(args.stage)
    a  = load(stage, "Q2A_Main")
    jf = load(stage, "Q2A_JobFunc_Q4")
    b  = load(stage, "Q2B")

    if a.empty and jf.empty and b.empty:
        print("[WARN] No Q2 sheets in staging.")
        return 0

    if args.year is None:
        years = pd.concat([d[["year"]] for d in [a,jf,b] if not d.empty], ignore_index=True)
        year = int(years["year"].mode().iat[0])
    else:
        year = int(args.year)

    qseries = pd.concat([d["quarter"] for d in [a,jf,b] if not d.empty], ignore_index=True)
    current_q = normalize_quarter_label(qseries)

    if not a.empty:  a  = a[a["year"]==year]
    if not jf.empty: jf = jf[jf["year"]==year]
    if not b.empty:  b  = b[b["year"]==year]

    prior_a = prior_jf = prior_b = None
    if args.prior_stage:
        p = Path(args.prior_stage)
        pa = load(p, "Q2A_Main")
        pj = load(p, "Q2A_JobFunc_Q4")
        pb = load(p, "Q2B")
        if not pa.empty: prior_a = pa[pa["year"]==(year-1)]
        if not pj.empty: prior_jf = pj[pj["year"]==(year-1)]
        if not pb.empty: prior_b = pb[pb["year"]==(year-1)]

    wb = new_workbook_with_about("RLMS â€“ QC (Q2)", year, current_q)

    if not a.empty:
        write_qc_sheet(
            wb, "QC_Q2A_Main", a,
            id_cols=["entity_name","subquestion","worker_category"],
            month_cols_in_df=months_up_to_quarter(current_q),
            add_job_function=False,
            current_q=current_q, year=year,
            prior_df=prior_a
        )
    if not jf.empty:
        write_qc_sheet(
            wb, "QC_Q2A_JobFunc_Q4", jf,
            id_cols=["entity_name","subquestion","worker_category","job_function"],
            month_cols_in_df=[],
            add_job_function=True,
            current_q=current_q, year=year,
            prior_df=None
        )
    if not b.empty:
        write_qc_sheet(
            wb, "QC_Q2B", b,
            id_cols=["entity_name","subquestion","worker_category"],
            month_cols_in_df=months_up_to_quarter(current_q),
            add_job_function=False,
            current_q=current_q, year=year,
            prior_df=prior_b
        )

    Path(args.out).parent.mkdir(parents=True, exist_ok=True)
    wb.save(args.out)
    print(f"[DONE] {args.out}")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
