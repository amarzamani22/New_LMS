# qc_q2.py
from __future__ import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import (
    new_empty_workbook, append_about_sheet_last, write_qc_sheet,
    normalize_quarter_label, MONTHS_FULL
)

def load(path: Path, preferred: str, fallbacks=None) -> pd.DataFrame:
    if fallbacks is None: fallbacks = []
    try:
        return pd.read_excel(path, sheet_name=preferred, engine="openpyxl")
    except Exception:
        # try fuzzy match
        try:
            xls = pd.ExcelFile(path, engine="openpyxl")
            for name in xls.sheet_names:
                if preferred.lower() == name.lower():
                    return pd.read_excel(path, sheet_name=name, engine="openpyxl")
            for f in fallbacks:
                for name in xls.sheet_names:
                    if f.lower() == name.lower():
                        return pd.read_excel(path, sheet_name=name, engine="openpyxl")
        except Exception:
            pass
    return pd.DataFrame()

def months_in_df(df: pd.DataFrame) -> list:
    return [m for m in MONTHS_FULL if m in df.columns]

def main() -> int:
    ap = argparse.ArgumentParser(description="QC for Question 2")
    ap.add_argument("--stage", required=True)
    ap.add_argument("--out", required=True)
    ap.add_argument("--prior-stage", default=None)
    ap.add_argument("--year", type=int, default=None)
    args = ap.parse_args()

    stage = Path(args.stage)
    q2a  = load(stage, "Q2A_Main")
    q2jf = load(stage, "Q2A_JobFunc_Q4")
    q2b  = load(stage, "Q2B")

    if q2a.empty and q2jf.empty and q2b.empty:
        print("[WARN] No Q2 sheets in staging.")
        return 0

    if args.year is None:
        years = pd.concat([d[["year"]] for d in [q2a,q2jf,q2b] if not d.empty], ignore_index=True)
        year = int(years["year"].mode().iat[0])
    else:
        year = int(args.year)

    qseries = pd.concat([d["quarter"] for d in [q2a,q2jf,q2b] if not d.empty], ignore_index=True)
    current_q = normalize_quarter_label(qseries)

    if not q2a.empty:  q2a  = q2a[q2a["year"]==year]
    if not q2jf.empty: q2jf = q2jf[q2jf["year"]==year]
    if not q2b.empty:  q2b  = q2b[q2b["year"]==year]

    # Keep only FIs with any non-zero data for Q2B (as requested)
    if not q2b.empty:
        valcols = [c for c in q2b.columns if c in MONTHS_FULL]
        grp = q2b.groupby("entity_name")[valcols].sum().sum(axis=1)
        keep = set(grp[grp != 0].index)
        q2b = q2b[q2b["entity_name"].isin(keep)]

    prior_a = prior_b = None
    if args.prior_stage:
        p = Path(args.prior_stage)
        pa = load(p, "Q2A_Main"); pb = load(p, "Q2B")
        if not pa.empty: prior_a = pa[pa["year"]==(year-1)]
        if not pb.empty: prior_b = pb[pb["year"]==(year-1)]

    wb = new_empty_workbook()

    if not q2a.empty:
        write_qc_sheet(
            wb, "QC_Q2A_Main", q2a,
            include_job_function=False,
            months_to_show=months_in_df(q2a),
            current_q=current_q, year=year,
            prior_df=prior_a
        )
    if not q2jf.empty:
        write_qc_sheet(
            wb, "QC_Q2A_JobFunc_Q4", q2jf,
            include_job_function=True,
            months_to_show=[],  # value-only
            current_q=current_q, year=year,
            prior_df=None
        )
    if not q2b.empty:
        write_qc_sheet(
            wb, "QC_Q2B", q2b,
            include_job_function=False,
            months_to_show=months_in_df(q2b),  # typically ["Jun"] or ["Dec"]
            current_q=current_q, year=year,
            prior_df=prior_b
        )

    append_about_sheet_last(wb, "RLMS â€“ QC (Q2)", year, current_q)
    Path(args.out).parent.mkdir(parents=True, exist_ok=True)
    wb.save(args.out)
    print(f"[DONE] {args.out}")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
