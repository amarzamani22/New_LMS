import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# --- Page Configuration (Set first) ---
st.set_page_config(
    page_title="Advanced QC Dashboard",
    page_icon="ðŸ¤–",
    layout="wide"
)

# --- Modern CSS Styling ---
st.markdown("""
<style>
    .stMetric {
        border-radius: 10px;
        padding: 15px;
        background-color: #262730;
    }
    .st-emotion-cache-176r98r {
        # This is a bit of a hack to target metric labels, might need adjustment if Streamlit updates
        font-size: 1.1em;
    }
</style>
""", unsafe_allow_html=True)


# --- 1. Data Loading Logic ---
@st.cache_data
def load_data(sheet_name):
    """Loads and caches data from a specific sheet in the Excel workbook."""
    file_path = "submission/qc_workbook_2025.xlsx"
    try:
        df = pd.read_excel(file_path, sheet_name=sheet_name, header=5)
        # Drop columns that are entirely empty, which can happen with Excel files
        df.dropna(axis=1, how='all', inplace=True)
        return df
    except Exception as e:
        return e

# --- 2. Outlier Detection Engine ---
def find_outliers(monthly_values, pct_thresh, abs_thresh, iqr_multiplier):
    """
    Finds outliers using a hybrid approach: Volatility and Annual Anomaly (IQR).
    Returns a dataframe of outliers and their reasons.
    """
    outliers = []
    
    # --- IQR (Annual Anomaly) Calculation ---
    q1 = monthly_values.quantile(0.25)
    q3 = monthly_values.quantile(0.75)
    iqr = q3 - q1
    iqr_lower_bound = q1 - (iqr_multiplier * iqr)
    iqr_upper_bound = q3 + (iqr_multiplier * iqr)

    for i in range(len(monthly_values)):
        curr_month = monthly_values.index[i]
        curr_val = monthly_values.iloc[i]
        
        reasons = []
        
        # --- Check 1: Volatility (MoM Shock) ---
        if i > 0:
            prev_val = monthly_values.iloc[i-1]
            if prev_val != 0:
                abs_change = curr_val - prev_val
                pct_change = abs_change / prev_val
                if abs(pct_change) > pct_thresh and abs(abs_change) > abs_thresh:
                    reasons.append(f"High Volatility ({pct_change:+.1%})")

        # --- Check 2: Annual Anomaly (IQR) ---
        if curr_val < iqr_lower_bound or curr_val > iqr_upper_bound:
            reasons.append("Annual Anomaly")
            
        if reasons:
            outliers.append({
                "Month": curr_month,
                "Value": f"{curr_val:,.2f}",
                "Reason(s)": ", ".join(reasons)
            })
            
    return pd.DataFrame(outliers)


# --- 3. Main Dashboard Interface ---
st.title("ðŸ¤– Advanced Outlier Detection Dashboard")
st.markdown("A smart QC tool to identify **true outliers** using a hybrid statistical approach.")

# --- Sidebar Controls ---
st.sidebar.header("Analysis Controls")
SHEET_MAP = {
    'Q1A: Number of Employees': 'QC_Q1A_Main', 'Q2A: Salary & Wages': 'QC_Q2A_Main',
    'Q3: Hours Worked': 'QC_Q3', 'Q4: Job Vacancies': 'QC_Q4',
    'Q5: Employee Separations': 'QC_Q5'
}
selected_question = st.sidebar.selectbox("1. Select a dataset:", options=list(SHEET_MAP.keys()))
df = load_data(SHEET_MAP[selected_question])

if isinstance(df, Exception):
    st.error(f"Failed to load data. Error: {df}")
else:
    st.sidebar.subheader("Threshold Configuration")
    abs_threshold = st.sidebar.slider(
        "Absolute Change Threshold", 10, 1000, 50, 10,
        help="Flags MoM change if the value changes by more than this number."
    )
    iqr_mult = st.sidebar.slider(
        "IQR Sensitivity", 1.0, 3.0, 1.5, 0.1,
        help="Controls sensitivity of the Annual Anomaly check. Higher is less sensitive."
    )
    st.sidebar.info("The relative (MoM %) threshold is fixed at **Â±25%**.")
    
    # --- Dynamic Filters ---
    entity = st.sidebar.selectbox("2. Select an Entity / Group:", options=df['Entity / Group'].unique())
    subquestion = st.sidebar.selectbox("3. Select a Subquestion:", options=df[df['Entity / Group'] == entity]['Subquestion'].unique())
    worker_cat = st.sidebar.selectbox("4. Select a Worker Category:", options=df[(df['Entity / Group'] == entity) & (df['Subquestion'] == subquestion)]['Worker Category'].unique())

    # --- Data Filtering & Analysis ---
    data_row = df[(df['Entity / Group'] == entity) & (df['Subquestion'] == subquestion) & (df['Worker Category'] == worker_cat)]

    if data_row.empty:
        st.warning("No data for this selection.")
    else:
        st.header(f"Analysis for: {entity}")
        st.caption(f"{subquestion} | {worker_cat}")
        
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        # Ensure all month columns exist, fill with 0 if not.
        for month in months:
            if month not in data_row.columns:
                data_row[month] = 0
        
        monthly_values = data_row[months].iloc[0].astype(float)
        outlier_df = find_outliers(monthly_values, 0.25, abs_threshold, iqr_mult)

        # --- KPI Cards ---
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Latest Value (Dec)", f"{monthly_values['Dec']:,.0f}")
        col2.metric("Annual Average", f"{monthly_values.mean():,.0f}")
        col3.metric("Annual High", f"{monthly_values.max():,.0f}")
        col4.metric("Significant Outliers", len(outlier_df))

        # --- Charting ---
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(months, monthly_values, marker='o', linestyle='-', label='Monthly Trend', color='#1f77b4', zorder=5)
        ax.set_title("Annual Trend & Detected Outliers", fontsize=16)
        ax.set_ylabel("Value")
        plt.xticks(rotation=45)
        ax.grid(True, which='both', linestyle='--', linewidth=0.3)
        
        # Highlight outliers on chart
        if not outlier_df.empty:
            outlier_months = outlier_df['Month'].tolist()
            outlier_values = monthly_values[outlier_months]
            ax.scatter(outlier_months, outlier_values, s=250, c='red', marker='X', zorder=10, label='True Outlier')

        ax.legend()
        plt.tight_layout()
        st.pyplot(fig)

        # --- Outlier Report ---
        if not outlier_df.empty:
            st.error("ðŸš¨ True Outlier(s) Detected!")
            st.write("The following months were flagged by our hybrid detection system:")
            st.dataframe(outlier_df, use_container_width=True)
        else:
            st.success("âœ… No significant outliers were detected based on the current thresholds.")
        
        with st.expander("Show Raw Data"):
            st.dataframe(data_row)
