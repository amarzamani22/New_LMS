# generate_powerbi_source.py
import pandas as pd
from pathlib import Path
import re

INPUT_PATH = "qc_workbook_2025Q2.xlsx"   # your QC workbook
OUTPUT_PATH = "powerbi_source_2025Q2.xlsx"

# Detect patterns
MONTHS = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
PATTERNS = {
    "Value": re.compile(r"^(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Q[1-4])$"),
    "Diff": re.compile(r"^Diff "),
    "MoM %": re.compile(r"^MoM "),
    "QoQ %": re.compile(r"^%Diff "),
    "YoY %": re.compile(r"^YoY "),
}

def safe_read_excel(path):
    try:
        return pd.read_excel(path, sheet_name=None, engine="openpyxl")
    except Exception as e:
        print(f"[!] Failed to read {path}: {e}")
        return {}

def classify_column(col):
    """Classify column type and period based on name."""
    for k, pattern in PATTERNS.items():
        if pattern.match(str(col)):
            # extract period (e.g., Feb from "Diff Feb", Q2 from "%Diff Q2")
            parts = str(col).replace("Diff ","").replace("MoM ","").replace("%Diff ","").replace("YoY ","").strip()
            return k, parts
    return None, None

def melt_sheet(df: pd.DataFrame, sheet_name: str):
    # Skip empty sheets
    if df.empty:
        return pd.DataFrame()

    # Identify question from sheet name (e.g., QC_Q1A_Main → Q1)
    qmatch = re.search(r"(Q[1-5])", sheet_name)
    question = qmatch.group(1) if qmatch else ""

    # Ensure standard columns exist
    for col in ["Entity / Group","Subquestion","Worker Category","Job Function"]:
        if col not in df.columns:
            df[col] = ""

    id_cols = ["Entity / Group","Subquestion","Worker Category","Job Function"]

    melted_frames = []
    for col in df.columns:
        metric_type, metric_period = classify_column(col)
        if not metric_type:
            continue
        tmp = df[id_cols].copy()
        tmp["MetricType"] = metric_type
        tmp["MetricPeriod"] = metric_period
        # Convert "N/A" or blank to NaN
        tmp["Value"] = pd.to_numeric(
            df[col].replace(["N/A","NA","na","n/a",""], pd.NA),
            errors="coerce"
        )
        tmp["Sheet"] = sheet_name
        tmp["Question"] = question
        melted_frames.append(tmp)

    if not melted_frames:
        return pd.DataFrame()
    return pd.concat(melted_frames, ignore_index=True)

def main():
    print(f"Loading QC workbook: {INPUT_PATH}")
    sheets = safe_read_excel(INPUT_PATH)
    if not sheets:
        print("No sheets found!")
        return

    all_frames = []
    for name, df in sheets.items():
        if not name.startswith("QC_"):
            continue
        print(f"Processing {name}...")
        melted = melt_sheet(df, name)
        if not melted.empty:
            all_frames.append(melted)

    if not all_frames:
        print("No QC sheets produced data.")
        return

    combined = pd.concat(all_frames, ignore_index=True)
    print(f"Combined rows: {len(combined)}")

    # Clean up for Power BI
    combined = combined.sort_values(["Question","Sheet","Entity / Group","MetricType","MetricPeriod"])
    combined.reset_index(drop=True, inplace=True)

    # Write to Excel
    combined.to_excel(OUTPUT_PATH, index=False, engine="openpyxl")
    print(f"[✓] Power BI source saved → {OUTPUT_PATH}")

if __name__ == "__main__":
    main()
