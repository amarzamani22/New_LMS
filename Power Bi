# build_powerbi_from_qc.py
from __future__ import annotations
import argparse
from pathlib import Path
import pandas as pd

def read_qc_sheets(qc_path: Path, verbose=False) -> pd.DataFrame:
    """
    Read every QC_* sheet from the QC workbook and combine into one clean CSV dataset.
    - Keeps all numeric/calculated columns (Jan–Dec, Diff, MoM, QoQ, YoY, etc.)
    - Converts 'N/A' → blank (None)
    - Adds a 'question' column based on sheet name
    """
    if verbose: print(f"[INFO] Reading QC workbook: {qc_path.name}")
    xls = pd.ExcelFile(qc_path, engine="openpyxl")

    all_parts = []
    for sheet in xls.sheet_names:
        if sheet.startswith("QC_"):
            if verbose: print(f"  [+] Reading sheet: {sheet}")
            df = pd.read_excel(xls, sheet_name=sheet, engine="openpyxl")
            if df.empty:
                if verbose: print(f"    [!] Sheet empty, skipped: {sheet}")
                continue

            # Replace various NA forms with actual NaN (blank)
            df = df.replace(["N/A", "n/a", "#N/A", "NA", "na"], pd.NA)

            # Add a question identifier
            df.insert(0, "question", sheet)

            all_parts.append(df)

        elif sheet.lower().startswith("_about"):
            if verbose: print(f"  [!] Skipping metadata sheet: {sheet}")
            continue

    if not all_parts:
        print("[WARN] No QC_* sheets found.")
        return pd.DataFrame()

    combined = pd.concat(all_parts, ignore_index=True)
    if verbose:
        print(f"[=] Combined {len(all_parts)} sheets → {len(combined):,} rows, {len(combined.columns)} columns")

    # Clean column names: strip spaces, unify case slightly
    combined.columns = [str(c).strip() for c in combined.columns]

    # Convert numeric-like columns where possible
    for c in combined.columns:
        # skip obvious text columns
        if c.lower() in ["question", "entity / group", "subquestion", "worker category", "job function"]:
            continue
        # try numeric
        combined[c] = pd.to_numeric(combined[c], errors="ignore")

    return combined


def main() -> int:
    ap = argparse.ArgumentParser(description="Build Power BI-ready CSV directly from QC workbook.")
    ap.add_argument("--qc", required=True, help="Path to QC workbook, e.g. qc_workbook_2025Q2.xlsx")
    ap.add_argument("--out", required=True, help="Output CSV path for Power BI (e.g. analysis_base.csv)")
    ap.add_argument("--verbose", action="store_true", help="Print progress information")
    args = ap.parse_args()

    qc_path = Path(args.qc)
    if not qc_path.exists():
        print(f"[ERROR] File not found: {qc_path}")
        return 2

    df = read_qc_sheets(qc_path, verbose=args.verbose)
    if df.empty:
        print("[WARN] No data written — workbook appears empty or no QC_* sheets found.")
        return 0

    Path(args.out).parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(args.out, index=False)
    if args.verbose:
        print(f"[DONE] Wrote {len(df):,} rows × {len(df.columns)} cols → {args.out}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
