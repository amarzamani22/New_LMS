    # --- Build prior qc frame with the same keys/columns (robust for Q3: no subquestion) ---
    prior_qc_df = None
    if args.prior_df is not None and not args.prior_df.empty:
        p = args.prior_df.copy()

        # Ensure optional key columns exist in PRIOR too (Q3 has no subquestion)
        for c in ["subquestion", "worker_category", "job_function"]:
            if c not in p.columns:
                p[c] = ""

        # Ensure numeric columns expected for join exist in PRIOR as well
        if jobfunc_mode:
            if "value" not in p.columns:
                p["value"] = 0.0
        else:
            for m in months:
                if m not in p.columns:
                    p[m] = 0.0

        # Attach entity type and build rollups on PRIOR just like current
        p = attach_entity_type(p, "entity_name")
        p_keys = ["subquestion", "worker_category"]
        if jobfunc_mode:
            p_keys.append("job_function")
        p_nums = (["value"] if jobfunc_mode else months)
        p_roll = expand_rollups(p, keys=p_keys, numeric_cols=p_nums)

        # Map to display keys for prior sheet(s)
        p_roll["Entity / Group"] = p_roll["Entity / Group"]  # already created by expand_rollups
        p_roll["Subquestion"]     = p_roll["subquestion"]
        p_roll["Worker Category"] = p_roll["worker_category"]

        if jobfunc_mode:
            p_roll["Job Function"] = p_roll["job_function"]
            p_roll["Q4"] = p_roll["value"]
            prior_qc_df = p_roll[["Entity / Group","Subquestion","Worker Category","Job Function","Q4"]].copy()
        else:
            # Provide quarterly totals in prior if weâ€™ll do YoY on quarters
            for q in ["Q1","Q2","Q3","Q4"]:
                need = set(Q_TO_MONTHS[q])
                if need.issubset(set(p_roll.columns)):
                    p_roll[q] = p_roll[list(need)].sum(axis=1)

            base_cols = ["Entity / Group","Subquestion","Worker Category"]
            keep_cols = base_cols + [c for c in ["Q1","Q2","Q3","Q4"] if c in p_roll.columns] \
                                   + [m for m in months if m in p_roll.columns]
            prior_qc_df = p_roll[keep_cols].copy()
