#!/usr/bin/env python3
from __future__ import annotations
import os, sys, tempfile, shutil, subprocess
from pathlib import Path
from typing import Dict, List, Optional
from openpyxl import load_workbook, Workbook
from openpyxl.worksheet.table import Table, TableStyleInfo

# ---------------------------
# Simple prompts
# ---------------------------
def ask_path(prompt: str, must_exist: bool = False, allow_blank: bool = False) -> Optional[Path]:
    while True:
        p = input(prompt).strip()
        if allow_blank and p == "":
            return None
        path = Path(p)
        if not must_exist or path.exists():
            return path
        print("  -> Not found. Try again.")

def ask_float(prompt: str, default: float) -> float:
    s = input(f"{prompt} [default {default}]: ").strip()
    if s == "":
        return default
    try:
        return float(s)
    except Exception:
        print("  -> Invalid number. Using default.")
        return default

def ask_yesno(prompt: str, default_yes: bool = True) -> bool:
    d = "Y/n" if default_yes else "y/N"
    s = input(f"{prompt} ({d}): ").strip().lower()
    if s == "":
        return default_yes
    return s in ("y","yes")

def run_subprocess(pyfile: str, args: List[str]) -> bool:
    exe = sys.executable or "python"
    cmd = [exe, pyfile] + args
    print("  ->", " ".join([str(c) for c in cmd]))
    try:
        res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        print(res.stdout)
        return res.returncode == 0
    except Exception as e:
        print(f"  -> Failed to run {pyfile}: {e}")
        return False

# ---------------------------
# Styled sheet copy (values + styles + rules + tables)
# ---------------------------
def _unique_sheet_name(dest_wb: Workbook, desired: str) -> str:
    base = desired[:31]
    name = base
    k = 1
    while name in dest_wb.sheetnames:
        suff = f"_{k}"
        name = (base[:31-len(suff)] + suff)
        k += 1
    return name

def _unique_table_name(existing: set, base: str) -> str:
    norm = "".join(ch if ch.isalnum() else "_" for ch in (base or "Table"))
    name = norm
    k = 1
    while name in existing:
        name = f"{norm}_{k}"
        k += 1
    existing.add(name)
    return name

def copy_sheet_with_styles(ws_src, dest_wb: Workbook, name_hint: Optional[str] = None) -> str:
    """
    Deep copy of a sheet:
      - values, formulas, number formats
      - fonts, fills, alignment, borders
      - column widths, row heights, hidden flags
      - freeze panes
      - conditional formatting rules (including colors)
      - Excel tables (unique names)
    """
    name = _unique_sheet_name(dest_wb, name_hint or ws_src.title)
    ws_new = dest_wb.create_sheet(name)

    max_row, max_col = ws_src.max_row, ws_src.max_column

    # 1) Cells (values + formats/styles)
    for row in ws_src.iter_rows(min_row=1, max_row=max_row, min_col=1, max_col=max_col):
        for cell in row:
            c = ws_new.cell(cell.row, cell.col_idx, cell.value)
            c.number_format = cell.number_format
            if cell.font:      c.font = cell.font.copy()
            if cell.fill:      c.fill = cell.fill.copy()
            if cell.alignment: c.alignment = cell.alignment.copy()
            if cell.border:    c.border = cell.border.copy()

    # 2) Col widths / hidden
    for col_letter, dim in ws_src.column_dimensions.items():
        tgt = ws_new.column_dimensions[col_letter]
        if dim.width is not None:
            tgt.width = dim.width
        tgt.hidden = bool(dim.hidden)

    # 3) Row heights / hidden
    for idx, dim in ws_src.row_dimensions.items():
        tgt = ws_new.row_dimensions[idx]
        if dim.height is not None:
            tgt.height = dim.height
        tgt.hidden = bool(dim.hidden)

    # 4) Freeze panes
    try:
        ws_new.freeze_panes = ws_src.freeze_panes
    except Exception:
        pass

    # 5) Conditional formatting
    try:
        for key, rules in ws_src.conditional_formatting._cf_rules.items():  # type: ignore[attr-defined]
            for rule in rules:
                # Copy to same sqref
                ws_new.conditional_formatting.add(rule.sqref, rule)
    except Exception:
        pass

    # 6) Tables (with unique names)
    try:
        existing = {t.displayName for s in dest_wb.worksheets for t in getattr(s, "_tables", [])}
        for t in getattr(ws_src, "_tables", []):
            new_t = Table(displayName=_unique_table_name(existing, t.displayName), ref=t.ref)
            if isinstance(t.tableStyleInfo, TableStyleInfo):
                s = t.tableStyleInfo
                new_t.tableStyleInfo = TableStyleInfo(
                    name=s.name,
                    showFirstColumn=s.showFirstColumn,
                    showLastColumn=s.showLastColumn,
                    showRowStripes=s.showRowStripes,
                    showColumnStripes=s.showColumnStripes,
                )
            ws_new.add_table(new_t)
    except Exception:
        pass

    return name

def copy_workbook_sheets(src_xlsx: Path, dest_wb: Workbook) -> int:
    """Copy all sheets from src_xlsx to dest_wb preserving styles."""
    try:
        wb = load_workbook(src_xlsx, data_only=False)  # keep formulas
    except Exception as e:
        print(f"  -> Could not open {src_xlsx.name}: {e}")
        return 0
    count = 0
    for nm in wb.sheetnames:
        copy_sheet_with_styles(wb[nm], dest_wb, nm)
        count += 1
    try: wb.close()
    except Exception: pass
    return count

def remove_about_sheet(xlsx: Path) -> None:
    """Delete any sheet named exactly '_About' inside a workbook."""
    try:
        wb = load_workbook(xlsx)
        if "_About" in wb.sheetnames:
            del wb["_About"]
            wb.save(xlsx)
        wb.close()
    except Exception:
        pass

# ---------------------------
# Main interactive runner
# ---------------------------
def main() -> int:
    print("\n=== RLMS QC – Interactive Runner (Styled, Single About) ===\n")

    stage_path = ask_path("Path to CURRENT staging workbook (.xlsx): ", must_exist=True)
    out_path   = ask_path("Path to OUTPUT merged QC workbook (.xlsx): ", must_exist=False)
    if out_path.suffix.lower() != ".xlsx":
        out_path = out_path.with_suffix(".xlsx")

    run_q1 = ask_yesno("Run QC for Question 1?", True)
    run_q2 = ask_yesno("Run QC for Question 2?", True)
    run_q3 = ask_yesno("Run QC for Question 3?", True)
    run_q4 = ask_yesno("Run QC for Question 4?", True)
    run_q5 = ask_yesno("Run QC for Question 5?", True)

    print("\n(Optional) Prior stagings for YoY (blank = skip):")
    prior_q1 = ask_path("  Prior staging for Q1: ", must_exist=True, allow_blank=True)
    prior_q2 = ask_path("  Prior staging for Q2: ", must_exist=True, allow_blank=True)
    prior_q3 = ask_path("  Prior staging for Q3: ", must_exist=True, allow_blank=True)
    prior_q4 = ask_path("  Prior staging for Q4: ", must_exist=True, allow_blank=True)
    prior_q5 = ask_path("  Prior staging for Q5: ", must_exist=True, allow_blank=True)

    print("\nThresholds per question (Enter to keep defaults):")
    def ask_th(tag: str, mom=0.25, qoq=0.25, yoy=0.25, absc=50.0):
        print(f"  • {tag}")
        return {
            "mom": ask_float("    MoM % threshold", mom),
            "qoq": ask_float("    QoQ % threshold", qoq),
            "yoy": ask_float("    YoY % threshold", yoy),
            "abs": ask_float("    Absolute diff cutoff", absc),
        }

    TH: Dict[str, Dict[str,float]] = {}
    if run_q1: TH["Q1"] = ask_th("Q1")
    if run_q2: TH["Q2"] = ask_th("Q2")
    if run_q3: TH["Q3"] = ask_th("Q3")
    if run_q4: TH["Q4"] = ask_th("Q4")
    if run_q5: TH["Q5"] = ask_th("Q5")

    tmpdir = Path(tempfile.mkdtemp(prefix="qc_all_"))
    print(f"\n[INFO] Working directory: {tmpdir}")

    jobs: List[tuple] = []
    def add_job(script: str, tag: str, prior: Optional[Path]):
        out = tmpdir / f"{tag}.xlsx"
        args = [
            "--stage", str(stage_path), "--out", str(out),
            "--mom-threshold", str(TH[tag]["mom"]),
            "--qoq-threshold", str(TH[tag]["qoq"]),
            "--yoy-threshold", str(TH[tag]["yoy"]),
            "--abs-cutoff",    str(TH[tag]["abs"]),
        ]
        if prior: args += ["--prior-stage", str(prior)]
        jobs.append((script, out, args, tag))

    if run_q1: add_job("qc_q1.py", "Q1", prior_q1)
    if run_q2: add_job("qc_q2.py", "Q2", prior_q2)
    if run_q3: add_job("qc_q3.py", "Q3", prior_q3)
    if run_q4: add_job("qc_q4.py", "Q4", prior_q4)
    if run_q5: add_job("qc_q5.py", "Q5", prior_q5)

    produced: List[Path] = []
    for script, out_xlsx, args, tag in jobs:
        print(f"\n[RUN] {tag} → {script}")
        if not Path(script).exists():
            print(f"  -> {script} not found. Skipping {tag}.")
            continue
        ok = run_subprocess(script, args)
        if ok and out_xlsx.exists():
            # remove per-question _About before merging
            remove_about_sheet(out_xlsx)
            produced.append(out_xlsx)
        else:
            print(f"  -> {tag} produced no workbook.")

    if not produced:
        print("\n[WARN] Nothing to merge.")
        shutil.rmtree(tmpdir, ignore_errors=True)
        return 0

    # Merge with full styling
    merged = Workbook()
    merged.remove(merged.active)

    print(f"\n[MERGE] Copying styled sheets into: {out_path.name}")
    for p in produced:
        copied = copy_workbook_sheets(p, merged)
        print(f"  -> {copied} sheet(s) from {p.name}")

    # Single About at end
    about = merged.create_sheet("_About")
    about["A1"] = "RLMS – QC (All Questions)"; about["A1"].style = "Title"
    about["A3"] = "Current staging"; about["B3"] = str(stage_path)
    about["A4"] = "This file";       about["B4"] = str(out_path)

    out_path.parent.mkdir(parents=True, exist_ok=True)
    merged.save(out_path)
    print(f"\n[DONE] Wrote merged QC workbook → {out_path}")

    if ask_yesno("Delete temporary per-question QC files?", True):
        shutil.rmtree(tmpdir, ignore_errors=True)
        print("  -> Temp cleaned.")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
