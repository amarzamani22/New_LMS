# --- Worker Category (fix: remove items that are actually Subquestions/TOTALs) ---
if 'Worker Category' in df_options.columns:
    wc_raw = [str(x).strip() for x in df_options['Worker Category'].dropna().unique()]
    subq_set = set([str(x).strip() for x in df_options['Subquestion'].dropna().unique()]) if 'Subquestion' in df_options.columns else set()

    def _looks_like_subq_or_total(s: str) -> bool:
        # e.g. "c(ii) ..." or "TOTAL ..." or "Total ..."
        return bool(re.match(r"^[A-Za-z]\((?:i|v|x)+\)", s)) or s.upper().startswith("TOTAL ")

    wc_clean = sorted([w for w in wc_raw if (w not in subq_set and not _looks_like_subq_or_total(w))])

    if wc_clean:
        wc_selected = st.multiselect("Worker Category (leave empty = ALL)", options=wc_clean, default=[])
        wc_value = wc_selected if wc_selected else "ALL"
    else:
        st.caption("Worker Category not applicable / overlaps with Subquestion; using ALL.")
        wc_value = "ALL"
else:
    st.caption("No 'Worker Category' column in this dataset.")
    wc_value = "ALL"
