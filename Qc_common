# qc_common.py
from __future__ import annotations
from datetime import datetime
from typing import List, Optional, Sequence, Dict
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.formatting.rule import DataBarRule, FormulaRule

Q_TO_MONTHS = {"Q1":["Jan","Feb","Mar"], "Q2":["Apr","May","Jun"], "Q3":["Jul","Aug","Sep"], "Q4":["Oct","Nov","Dec"]}
MONTHS_FULL = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]

FILL_Q1 = PatternFill(start_color="E8F3FF", end_color="E8F3FF", fill_type="solid")
FILL_Q2 = PatternFill(start_color="E8F8E8", end_color="E8F8E8", fill_type="solid")
FILL_Q3 = PatternFill(start_color="FFF3E0", end_color="FFF3E0", fill_type="solid")
FILL_Q4 = PatternFill(start_color="F3E5F5", end_color="F3E5F5", fill_type="solid")
FILL_RAW = PatternFill(start_color="E6EEF7", end_color="E6EEF7", fill_type="solid")
FILL_TOTAL_ROW = PatternFill(start_color="F7F7F7", end_color="F7F7F7", fill_type="solid")
FILL_RED = PatternFill(start_color="FFE5E5", end_color="FFE5E5", fill_type="solid")
FILL_YELLOW = PatternFill(start_color="FFF7CC", end_color="FFF7CC", fill_type="solid")
QFILL = {"Q1": FILL_Q1, "Q2": FILL_Q2, "Q3": FILL_Q3, "Q4": FILL_Q4}

def normalize_quarter_label(series) -> str:
    mapping = {"Quarter 1":"Q1","Quarter 2":"Q2","Quarter 3":"Q3","Quarter 4":"Q4","Q1":"Q1","Q2":"Q2","Q3":"Q3","Q4":"Q4"}
    s = series.map(mapping).dropna()
    if s.empty: return "Q4"
    ranks = {"Q1":1,"Q2":2,"Q3":3,"Q4":4}
    return s.iloc[s.map(ranks).idxmax()]

def _ensure_months(df, months: Sequence[str]):
    df = df.copy()
    for m in months:
        if m not in df.columns:
            df[m] = 0.0
    return df

def _quarter_sum_cols(columns: List[str]) -> List[str]:
    out = []
    if all(m in columns for m in Q_TO_MONTHS["Q1"]): out.append("Q1")
    if all(m in columns for m in Q_TO_MONTHS["Q2"]): out.append("Q2")
    if all(m in columns for m in Q_TO_MONTHS["Q3"]): out.append("Q3")
    if all(m in columns for m in Q_TO_MONTHS["Q4"]): out.append("Q4")
    return out

def _compose_headers(
    include_job_function: bool,
    months: List[str],
    have_quarters: List[str],
    want_yoy: bool,
    add_prior: bool
) -> List[str]:
    dims = ["Entity / Group","Subquestion","Worker Category","Institution"]
    if include_job_function:
        dims.append("Job Function")
    headers = dims + months

    # Monthly diffs & MoM
    MONTHS_FULL = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
    m_diffs, m_mom = [], []
    for m in months:
        i = MONTHS_FULL.index(m)
        prev = MONTHS_FULL[i-1] if i>0 else None
        if prev and prev in months:
            m_diffs.append(f"Diff {m}")
            m_mom.append(f"MoM {m}")
    if m_diffs: headers += [" "] + m_diffs
    if m_mom:   headers += ["  "] + m_mom

    # Quarterly block
    if have_quarters:
        headers += ["   "] + have_quarters
        q_diffs = []
        for i,q in enumerate(have_quarters):
            if i==0: continue
            q_diffs += [f"Diff {q}", f"%Diff {q}"]
        headers += q_diffs

    # YoY + Prior
    if want_yoy and have_quarters:
        yoy = [f"YoY {q}" for q in have_quarters]
        pri = [f"Prior {q}" for q in have_quarters] if add_prior else []
        headers += ["    "] + yoy + pri
    return headers

def write_qc_sheet(
    wb: Workbook,
    sheet_name: str,
    df,
    *,
    include_job_function: bool,
    months_to_show: List[str],
    current_q: Optional[str],
    year: Optional[int],
    prior_df=None,
    mom_pct_threshold: float = 0.25,
    abs_cutoff: float = 50,
    qoq_pct_threshold: float = 0.25
) -> None:
    """
    df must already have columns:
      - entity_name, subquestion?, worker_category?
      - job_function? (only when include_job_function=True)
      - some subset of Jan..Dec (months_to_show controls what appears)
      - or a single 'value' column (for job_function tables with no months)
    """
    ws = wb.create_sheet(sheet_name)

    # Build display frame
    dims = ["entity_name","subquestion","worker_category"]
    if include_job_function:
        dims.append("job_function")

    # Decide if this is a monthly table or a value-only table
    has_months = any(m in df.columns for m in MONTHS_FULL) and len(months_to_show) > 0
    if has_months:
        df = _ensure_months(df, months_to_show)
        p = df[dims + months_to_show].copy()
        p = p.groupby(dims, dropna=False)[months_to_show].sum().reset_index()
    else:
        # value-only tables (e.g., job function Q4)
        if "value" not in df.columns:
            # nothing to show
            p = df[dims].copy()
            p["Value"] = 0.0
        else:
            p = df[dims + ["value"]].copy()
            p["Value"] = p["value"].astype(float)
            p = p.drop(columns=["value"])

    # Rename dims for display + add Institution (same as entity row-level)
    rename_map = {"entity_name":"Entity / Group", "subquestion":"Subquestion",
                  "worker_category":"Worker Category", "job_function":"Job Function"}
    p = p.rename(columns=rename_map)
    p["Institution"] = p["Entity / Group"]

    # Determine quarter sums (only meaningful for monthly tables)
    have_quarters = _quarter_sum_cols(p.columns.tolist()) if has_months else []

    # Compose headers strictly aligned with data
    headers = _compose_headers(
        include_job_function=include_job_function,
        months=months_to_show if has_months else [],
        have_quarters=have_quarters,
        want_yoy=bool(prior_df is not None and has_months),
        add_prior=bool(prior_df is not None and has_months)
    )

    # Write header rows
    banner_row, header_row = 7, 8
    for c in range(1, len(headers)+1):
        ws.cell(banner_row, c, None)
    for i,h in enumerate(headers, start=1):
        ws.cell(header_row, i, h).font = Font(bold=True)
        if has_months and h in months_to_show:
            ws.cell(header_row, i).fill = FILL_RAW

    col_index = {h:i+1 for i,h in enumerate(headers)}
    center = Alignment(horizontal="center", vertical="center")

    # Dimensions banner
    dim_headers = ["Entity / Group","Subquestion","Worker Category","Institution"] + (["Job Function"] if include_job_function else [])
    if any(h in col_index for h in dim_headers):
        first = col_index[dim_headers[0]]
        last  = col_index[dim_headers[-1]]
        ws.merge_cells(start_row=banner_row, start_column=first, end_row=banner_row, end_column=last)
        ws.cell(banner_row, first, "Dimensions").font = Font(bold=True)
        ws.cell(banner_row, first).alignment = center

    # Month banners with quarter colors
    if has_months:
        for qlbl, qmonths in Q_TO_MONTHS.items():
            include = [m for m in months_to_show if m in qmonths]
            if not include: continue
            c0 = col_index[include[0]]; cN = col_index[include[-1]]
            ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
            ws.cell(banner_row, c0, f"{qlbl} {year or ''}".strip()).font = Font(bold=True)
            ws.cell(banner_row, c0).alignment = center
            for m in include:
                ws.cell(header_row, col_index[m]).fill = QFILL[qlbl]
                ws.cell(banner_row, col_index[m]).fill = QFILL[qlbl]

    # Monthly diff & MoM banners
    month_diff_headers, month_mom_headers = [], []
    if has_months:
        for m in months_to_show:
            idx = MONTHS_FULL.index(m)
            prev = MONTHS_FULL[idx-1] if idx>0 else None
            if prev and prev in months_to_show:
                month_diff_headers.append(f"Diff {m}")
                month_mom_headers.append(f"MoM {m}")
        if month_diff_headers:
            c0, cN = col_index[month_diff_headers[0]], col_index[month_diff_headers[-1]]
            ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
            ws.cell(banner_row, c0, "Monthly – Differences").font = Font(bold=True)
            ws.cell(banner_row, c0).alignment = center
            for h in month_diff_headers: ws.cell(header_row, col_index[h]).fill = FILL_Q1
        if month_mom_headers:
            c0, cN = col_index[month_mom_headers[0]], col_index[month_mom_headers[-1]]
            ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
            ws.cell(banner_row, c0, "Monthly – MoM%").font = Font(bold=True)
            ws.cell(banner_row, c0).alignment = center
            for h in month_mom_headers: ws.cell(header_row, col_index[h]).fill = FILL_Q2

    # Quarterly banner
    if have_quarters:
        qblock = have_quarters[:]
        for i,q in enumerate(have_quarters):
            if i==0: continue
            qblock += [f"Diff {q}", f"%Diff {q}"]
        c0, cN = col_index[qblock[0]], col_index[qblock[-1]]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "Quarterly (Sums, Δ, %Δ)").font = Font(bold=True)
        ws.cell(banner_row, c0).alignment = center

    # YoY banner
    if prior_df is not None and has_months and have_quarters:
        yoy_headers = [f"YoY {q}" for q in have_quarters]
        prior_headers = [f"Prior {q}" for q in have_quarters]
        block = yoy_headers + prior_headers
        c0, cN = col_index[block[0]], col_index[block[-1]]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "YoY vs same quarter last year").font = Font(bold=True)
        ws.cell(banner_row, c0).alignment = center

    # Prepare data rows exactly in header order
    first_data_row = header_row + 1
    for _, row in p.iterrows():
        line = []
        for h in headers:
            if h in p.columns:
                line.append(row.get(h, ""))
            else:
                line.append("")  # placeholder; formulas come later
        ws.append(line)
    last_data_row = first_data_row + p.shape[0] - 1

    # Formulas for diffs/MoM/QoQ
    if has_months and last_data_row >= first_data_row:
        # MoM & Diff (m)
        for m in months_to_show:
            idx = MONTHS_FULL.index(m)
            prev = MONTHS_FULL[idx-1] if idx>0 else None
            if not prev or prev not in months_to_show: continue
            for r in range(first_data_row, last_data_row+1):
                if f"Diff {m}" in col_index:
                    ws.cell(r, col_index[f"Diff {m}"]).value = f"={ws.cell(r,col_index[m]).coordinate}-{ws.cell(r,col_index[prev]).coordinate}"
                if f"MoM {m}" in col_index:
                    cur = ws.cell(r, col_index[m]).coordinate
                    den = ws.cell(r, col_index[prev]).coordinate
                    ws.cell(r, col_index[f"MoM {m}"]).value = (
                        f"=IF(AND({cur}=0,{den}=0),0,IF(AND({cur}<>0,{den}=0),\"N/A\",({cur}-{den})/{den}))"
                    )
        # Quarter sums
        q2m = Q_TO_MONTHS
        for qlbl in have_quarters:
            a,b = q2m[qlbl][0], q2m[qlbl][-1]
            for r in range(first_data_row, last_data_row+1):
                ws.cell(r, col_index[qlbl]).value = f"=SUM({ws.cell(r,col_index[a]).coordinate}:{ws.cell(r,col_index[b]).coordinate})"
        # QoQ diffs
        for i,q in enumerate(have_quarters):
            if i==0: continue
            prev = have_quarters[i-1]
            for r in range(first_data_row, last_data_row+1):
                if f"Diff {q}" in col_index:
                    ws.cell(r, col_index[f"Diff {q}"]).value = f"={ws.cell(r,col_index[q]).coordinate}-{ws.cell(r,col_index[prev]).coordinate}"
                if f"%Diff {q}" in col_index:
                    cur = ws.cell(r, col_index[q]).coordinate
                    den = ws.cell(r, col_index[prev]).coordinate
                    ws.cell(r, col_index[f"%Diff {q}"]).value = (
                        f"=IF(AND({cur}=0,{den}=0),0,IF(AND({cur}<>0,{den}=0),\"N/A\",({cur}-{den})/{den}))"
                    )

    # Optional YoY via hidden prior sheet
    if prior_df is not None and has_months and have_quarters and last_data_row >= first_data_row:
        prior_sheet = f"_{sheet_name}_PRIOR"
        w2 = wb.create_sheet(prior_sheet)
        w2.cell(1,1,"KEY").font = Font(bold=True)

        # Build a key in current sheet (concat dims)
        key_cols = ["Entity / Group","Subquestion","Worker Category","Institution"] + (["Job Function"] if include_job_function else [])
        key_col_idx = len(headers) + 1
        ws.cell(header_row, key_col_idx, "_KEY").font = Font(bold=True)
        for r in range(first_data_row, last_data_row+1):
            parts = [ws.cell(r, col_index[k]).coordinate for k in key_cols if k in col_index]
            ws.cell(r, key_col_idx).value = f'={("&\"|\"&").join(parts)}'
        ws.column_dimensions[ws.cell(header_row, key_col_idx).column_letter].hidden = True

        # Build prior pivot (same dims)
        prior = prior_df.copy()
        prior = _ensure_months(prior, months_to_show)
        pp = prior[dims + months_to_show].groupby(dims, dropna=False)[months_to_show].sum().reset_index()
        pp = pp.rename(columns={"entity_name":"Entity / Group","subquestion":"Subquestion",
                                "worker_category":"Worker Category","job_function":"Job Function"})
        # Write prior quarter totals
        prior_qs = _quarter_sum_cols(months_to_show)
        for j,q in enumerate(prior_qs, start=2):
            w2.cell(1, j, q).font = Font(bold=True)
        # compute prior quarterly sums
        for i, row in pp.iterrows():
            w2.cell(i+2, 1, "|".join(str(row.get(k,"")) for k in key_cols))
            # quarter values
            for j,q in enumerate(prior_qs, start=2):
                months = Q_TO_MONTHS[q]
                val = sum(float(row.get(m,0) or 0) for m in months)
                w2.cell(i+2, j, val)
        w2.sheet_state = "hidden"

        # Fill Prior and YoY formulas
        from openpyxl.utils import get_column_letter
        prior_letters = {q: w2.cell(1, j).column_letter for j,q in enumerate(prior_qs, start=2)}
        key_range = f"{prior_sheet}!$A:$A"
        for q in have_quarters:
            if q not in prior_letters: continue
            yoy_hdr, prior_hdr = f"YoY {q}", f"Prior {q}"
            if yoy_hdr not in col_index or prior_hdr not in col_index: continue
            val_range = f"{prior_sheet}!${prior_letters[q]}:${prior_letters[q]}"
            for r in range(first_data_row, last_data_row+1):
                key_addr = ws.cell(r, key_col_idx).coordinate
                prior_expr = f"INDEX({val_range},MATCH({key_addr},{key_range},0))"
                ws.cell(r, col_index[prior_hdr]).value = f"=IFERROR({prior_expr},\"\")"
                curr = ws.cell(r, col_index[q]).coordinate if q in col_index else "0"
                ws.cell(r, col_index[yoy_hdr]).value = (
                    f'=IFERROR(IF({prior_expr}="","N/A",IF(AND({prior_expr}=0,{curr}=0),0,IF(AND({prior_expr}=0,{curr}>0),"N/A",({curr}-{prior_expr})/{prior_expr}))),"N/A")'
                )
        # number formats for YoY/Prior
        for h, c in col_index.items():
            if h.startswith("YoY "):
                for r in range(first_data_row,last_data_row+1):
                    ws.cell(r, c).number_format = "0.0%"
            if h.startswith("Prior "):
                for r in range(first_data_row,last_data_row+1):
                    ws.cell(r, c).number_format = "#,##0"

    # Formats
    if last_data_row >= first_data_row:
        # percents
        for h,c in col_index.items():
            if h.startswith("MoM ") or h.startswith("%Diff "):
                for r in range(first_data_row,last_data_row+1):
                    ws.cell(r, c).number_format = "0.0%"
        # numbers
        for h,c in col_index.items():
            if (has_months and h in months_to_show) or h.startswith("Diff ") or h in have_quarters:
                for r in range(first_data_row,last_data_row+1):
                    ws.cell(r, c).number_format = "#,##0"

        # totals row
        totals_row = last_data_row + 2
        ws.cell(totals_row, 1, "TOTALS (visible rows)").font = Font(bold=True)
        for h,c in col_index.items():
            if (has_months and h in months_to_show) or h.startswith("Diff ") or h.startswith("MoM ") or h.startswith("%Diff ") or h.startswith("YoY ") or h in have_quarters:
                ws.cell(totals_row, c).value = f"=SUBTOTAL(9,{ws.cell(first_data_row,c).coordinate}:{ws.cell(last_data_row,c).coordinate})"
                ws.cell(totals_row, c).font = Font(bold=True)

        # basic table + freeze + filter
        ws.freeze_panes = ws.cell(first_data_row, col_index[dim_headers[-1]] + 1)
        ws.auto_filter.ref = f"A{header_row}:{ws.cell(last_data_row, len(headers)).coordinate}"
        tbl = Table(displayName=sheet_name.replace(" ","_"), ref=f"A{header_row}:{ws.cell(last_data_row, len(headers)).coordinate}")
        tbl.tableStyleInfo = TableStyleInfo(name="TableStyleLight9", showRowStripes=True, showColumnStripes=False)
        ws.add_table(tbl)

def new_empty_workbook() -> Workbook:
    wb = Workbook()
    wb.remove(wb.active)
    return wb

def append_about_sheet_last(wb: Workbook, title: str, year: int, qlabel: str) -> None:
    about = wb.create_sheet("About")
    about["A1"] = title
    about["A2"] = "Year";          about["B2"] = year
    about["A3"] = "Up to Quarter"; about["B3"] = qlabel
    about["A4"] = "Generated at";  about["B4"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
