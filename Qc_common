# qc_common.py
from __future__ import annotations
from datetime import datetime
from typing import List, Optional, Sequence, Dict
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.formatting.rule import DataBarRule, FormulaRule

Q_TO_MONTHS = {"Q1":["Jan","Feb","Mar"], "Q2":["Apr","May","Jun"], "Q3":["Jul","Aug","Sep"], "Q4":["Oct","Nov","Dec"]}
MONTHS_FULL = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]

FILL_Q1 = PatternFill(start_color="E8F3FF", end_color="E8F3FF", fill_type="solid")
FILL_Q2 = PatternFill(start_color="E8F8E8", end_color="E8F8E8", fill_type="solid")
FILL_Q3 = PatternFill(start_color="FFF3E0", end_color="FFF3E0", fill_type="solid")
FILL_Q4 = PatternFill(start_color="F3E5F5", end_color="F3E5F5", fill_type="solid")
FILL_RAW = PatternFill(start_color="E6EEF7", end_color="E6EEF7", fill_type="solid")
FILL_TOTAL_ROW = PatternFill(start_color="F7F7F7", end_color="F7F7F7", fill_type="solid")
FILL_RED = PatternFill(start_color="FFE5E5", end_color="FFE5E5", fill_type="solid")
FILL_YELLOW = PatternFill(start_color="FFF7CC", end_color="FFF7CC", fill_type="solid")
QFILL = {"Q1": FILL_Q1, "Q2": FILL_Q2, "Q3": FILL_Q3, "Q4": FILL_Q4}

def normalize_quarter_label(series) -> str:
    mapping = {"Quarter 1":"Q1","Quarter 2":"Q2","Quarter 3":"Q3","Quarter 4":"Q4","Q1":"Q1","Q2":"Q2","Q3":"Q3","Q4":"Q4"}
    s = series.map(mapping).dropna()
    if s.empty: return "Q4"
    ranks = {"Q1":1,"Q2":2,"Q3":3,"Q4":4}
    return s.iloc[s.map(ranks).idxmax()]

def _ensure_months(df, months: Sequence[str]):
    df = df.copy()
    for m in months:
        if m not in df.columns:
            df[m] = 0.0
    return df

def _quarter_sum_cols(columns: List[str]) -> List[str]:
    out = []
    if all(m in columns for m in Q_TO_MONTHS["Q1"]): out.append("Q1")
    if all(m in columns for m in Q_TO_MONTHS["Q2"]): out.append("Q2")
    if all(m in columns for m in Q_TO_MONTHS["Q3"]): out.append("Q3")
    if all(m in columns for m in Q_TO_MONTHS["Q4"]): out.append("Q4")
    return out

def _compose_dims(df_cols: List[str], include_job_function: bool) -> List[str]:
    dims = ["entity_name"]
    if "subquestion" in df_cols: dims.append("subquestion")
    if "worker_category" in df_cols: dims.append("worker_category")
    if include_job_function and "job_function" in df_cols: dims.append("job_function")
    return dims

def _display_dim_names(include_job_function: bool, has_subq: bool, has_wc: bool) -> List[str]:
    dims = ["Entity / Group"]
    if has_subq: dims.append("Subquestion")
    if has_wc:   dims.append("Worker Category")
    dims.append("Institution")
    if include_job_function: dims.append("Job Function")
    return dims

def _rename_dims_for_display(df):
    rename_map = {"entity_name":"Entity / Group","subquestion":"Subquestion","worker_category":"Worker Category","job_function":"Job Function"}
    return df.rename(columns=rename_map)

def _add_institution_col(df):
    df["Institution"] = df["Entity / Group"]
    return df

def write_qc_sheet(
    wb: Workbook,
    sheet_name: str,
    df,
    *,
    include_job_function: bool,
    months_to_show: List[str],
    current_q: Optional[str],
    year: Optional[int],
    prior_df=None,
    mom_pct_threshold: float = 0.25,
    abs_cutoff: float = 50,
    qoq_pct_threshold: float = 0.25,
    yoy_pct_threshold: float = 0.25  # for YoY highlighting
) -> None:
    ws = wb.create_sheet(sheet_name)

    df = df.copy()
    df_cols = df.columns.tolist()
    dims_src = _compose_dims(df_cols, include_job_function)
    has_subq = "subquestion" in df_cols
    has_wc = "worker_category" in df_cols

    # value-only vs monthly table
    has_months = any(m in df.columns for m in MONTHS_FULL) and len(months_to_show) > 0
    value_only = ("value" in df.columns) and not has_months

    # Pivot/group by dims
    if has_months:
        df = _ensure_months(df, months_to_show)
        p = df[dims_src + months_to_show].groupby(dims_src, dropna=False)[months_to_show].sum().reset_index()
    elif value_only:
        p = df[dims_src + ["value"]].copy()
        p["Value"] = p["value"].astype(float)
        p = p.drop(columns=["value"])
    else:
        # No months and no 'value' (rare) => just show zeros
        p = df[dims_src].copy()
        p["Value"] = 0.0

    p = _rename_dims_for_display(p)
    p = _add_institution_col(p)

    # Build headers
    dims_disp = _display_dim_names(include_job_function, has_subq, has_wc)
    headers = dims_disp[:]

    # Raw months
    if has_months:
        headers += months_to_show
    else:
        headers += ["Value"]  # value-only

    # Monthly diff & MoM (only for monthly tables)
    month_diff_headers, month_mom_headers = [], []
    if has_months:
        for m in months_to_show:
            i = MONTHS_FULL.index(m); prev = MONTHS_FULL[i-1] if i>0 else None
            if prev and prev in months_to_show:
                month_diff_headers.append(f"Diff {m}")
                month_mom_headers.append(f"MoM {m}")
        if month_diff_headers: headers += [" "] + month_diff_headers
        if month_mom_headers:  headers += ["  "] + month_mom_headers

    # Quarterly block (only for monthly tables)
    have_quarters = _quarter_sum_cols(months_to_show) if has_months else []
    if have_quarters:
        headers += ["   "] + have_quarters
        for i,q in enumerate(have_quarters):
            if i==0: continue
            headers += [f"Diff {q}", f"%Diff {q}"]

    # YoY blocks
    # A) Monthly full-quarter: use quarter YoY (as before)
    # B) Single-month tables (e.g., Q1B/Q2B): Prior <m>, YoY <m>, Diff YoY <m>
    # C) Value-only tables (Job Function Q4): Prior, YoY %, Diff YoY
    yoy_month = None
    if has_months and len(months_to_show) == 1:
        yoy_month = months_to_show[0]
        headers += ["    ", f"Prior {yoy_month}", f"YoY {yoy_month}", f"Diff YoY {yoy_month}"]
    elif has_months and have_quarters and prior_df is not None:
        headers += ["    "] + [f"YoY {q}" for q in have_quarters] + [f"Prior {q}" for q in have_quarters]
    elif value_only and prior_df is not None:
        headers += ["    ", "Prior", "YoY", "Diff YoY"]

    # Write header rows
    banner_row, header_row = 7, 8
    for c in range(1, len(headers)+1): ws.cell(banner_row, c, None)
    bold = Font(bold=True); center = Alignment(horizontal="center", vertical="center")

    for i,h in enumerate(headers, start=1):
        ws.cell(header_row, i, h).font = bold
        if has_months and h in months_to_show:
            ws.cell(header_row, i).fill = FILL_RAW

    col_index = {h:i+1 for i,h in enumerate(headers)}

    # Dimension banner
    c0 = col_index[dims_disp[0]]; cN = col_index[dims_disp[-1]]
    ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
    ws.cell(banner_row, c0, "Dimensions").font = bold
    ws.cell(banner_row, c0).alignment = center

    # Month banners per quarter
    if has_months:
        for qlbl, qmonths in Q_TO_MONTHS.items():
            include = [m for m in months_to_show if m in qmonths]
            if not include: continue
            c0 = col_index[include[0]]; cN = col_index[include[-1]]
            ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
            ws.cell(banner_row, c0, f"{qlbl} {year or ''}".strip()).font = bold
            ws.cell(banner_row, c0).alignment = center
            for m in include:
                ws.cell(header_row, col_index[m]).fill = QFILL[qlbl]
                ws.cell(banner_row, col_index[m]).fill = QFILL[qlbl]

    # Monthly blocks labels
    if month_diff_headers:
        c0, cN = col_index[month_diff_headers[0]], col_index[month_diff_headers[-1]]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "Monthly – Differences").font = bold
        ws.cell(banner_row, c0).alignment = center
        for h in month_diff_headers: ws.cell(header_row, col_index[h]).fill = FILL_Q1
    if month_mom_headers:
        c0, cN = col_index[month_mom_headers[0]], col_index[month_mom_headers[-1]]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "Monthly – MoM%").font = bold
        ws.cell(banner_row, c0).alignment = center
        for h in month_mom_headers: ws.cell(header_row, col_index[h]).fill = FILL_Q2

    # Quarterly banner
    if have_quarters:
        qblock = have_quarters[:]
        for i,q in enumerate(have_quarters):
            if i==0: continue
            qblock += [f"Diff {q}", f"%Diff {q}"]
        c0, cN = col_index[qblock[0]], col_index[qblock[-1]]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "Quarterly (Sums, Δ, %Δ)").font = bold
        ws.cell(banner_row, c0).alignment = center

    # YoY banners
    if yoy_month:
        c0 = col_index[f"Prior {yoy_month}"]; cN = col_index[f"Diff YoY {yoy_month}"]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, f"YoY vs same month last year ({yoy_month})").font = bold
        ws.cell(banner_row, c0).alignment = center
    elif value_only and prior_df is not None:
        c0 = col_index["Prior"]; cN = col_index["Diff YoY"]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "YoY vs prior year").font = bold
        ws.cell(banner_row, c0).alignment = center
    elif prior_df is not None and have_quarters:
        yoy_headers = [f"YoY {q}" for q in have_quarters]
        c0, cN = col_index[yoy_headers[0]], col_index[yoy_headers[-1]]
        ws.merge_cells(start_row=banner_row, start_column=c0, end_row=banner_row, end_column=cN)
        ws.cell(banner_row, c0, "YoY vs same quarter last year").font = bold
        ws.cell(banner_row, c0).alignment = center

    # Write rows
    first_data_row = header_row + 1
    for _, row in p.iterrows():
        line = []
        for h in headers:
            line.append(row.get(h, ""))
        ws.append(line)
    last_data_row = first_data_row + p.shape[0] - 1
    if last_data_row < first_data_row:
        return

    # Formulas (monthly tables)
    if has_months:
        # monthly diffs & MoM
        for m in months_to_show:
            i = MONTHS_FULL.index(m); prev = MONTHS_FULL[i-1] if i>0 else None
            if not prev or prev not in months_to_show: continue
            for r in range(first_data_row, last_data_row+1):
                if f"Diff {m}" in col_index:
                    ws.cell(r, col_index[f"Diff {m}"]).value = f"={ws.cell(r,col_index[m]).coordinate}-{ws.cell(r,col_index[prev]).coordinate}"
                if f"MoM {m}" in col_index:
                    cur = ws.cell(r, col_index[m]).coordinate
                    den = ws.cell(r, col_index[prev]).coordinate
                    ws.cell(r, col_index[f"MoM {m}"]).value = f"=IF(AND({cur}=0,{den}=0),0,IF(AND({cur}<>0,{den}=0),\"N/A\",({cur}-{den})/{den}))"
        # quarter sums
        for qlbl in have_quarters:
            a,b = Q_TO_MONTHS[qlbl][0], Q_TO_MONTHS[qlbl][-1]
            for r in range(first_data_row, last_data_row+1):
                ws.cell(r, col_index[qlbl]).value = f"=SUM({ws.cell(r,col_index[a]).coordinate}:{ws.cell(r,col_index[b]).coordinate})"
        # QoQ diffs
        for i,q in enumerate(have_quarters):
            if i==0: continue
            prev = have_quarters[i-1]
            for r in range(first_data_row, last_data_row+1):
                if f"Diff {q}" in col_index:
                    ws.cell(r, col_index[f"Diff {q}"]).value = f"={ws.cell(r,col_index[q]).coordinate}-{ws.cell(r,col_index[prev]).coordinate}"
                if f"%Diff {q}" in col_index:
                    cur = ws.cell(r, col_index[q]).coordinate
                    den = ws.cell(r, col_index[prev]).coordinate
                    ws.cell(r, col_index[f"%Diff {q}"]).value = f"=IF(AND({cur}=0,{den}=0),0,IF(AND({cur}<>0,{den}=0),\"N/A\",({cur}-{den})/{den}))"

    # YoY formulas
    if prior_df is not None:
        # single-month YoY (Jun/Dec)
        if yoy_month:
            # Build hidden prior lookup sheet
            prior_sheet = f"_{sheet_name}_PRIOR"
            w2 = wb.create_sheet(prior_sheet)
            w2.cell(1,1,"KEY").font = Font(bold=True); w2.cell(1,2,"PRIOR").font = Font(bold=True)
            # Build keys in current sheet
            key_cols = dims_disp
            key_col_idx = len(headers) + 1
            ws.cell(header_row, key_col_idx, "_KEY").font = Font(bold=True)
            for r in range(first_data_row, last_data_row+1):
                parts = [ws.cell(r, col_index[k]).coordinate for k in key_cols]
                ws.cell(r, key_col_idx).value = f'={("&\"|\"&").join(parts)}'
            ws.column_dimensions[ws.cell(header_row, key_col_idx).column_letter].hidden = True
            # Prior map
            prior = prior_df.copy()
            # group on dims and sum month
            keep_cols = [c for c in ["entity_name","subquestion","worker_category","job_function",yoy_month] if c in prior.columns]
            prior = prior[keep_cols].groupby([c for c in keep_cols if c!=yoy_month], dropna=False)[yoy_month].sum().reset_index()
            prior = _rename_dims_for_display(prior)
            prior["Institution"] = prior["Entity / Group"]
            # write prior
            for i, row in prior.iterrows():
                key = "|".join(str(row.get(k,"")) for k in key_cols)
                w2.cell(i+2, 1, key); w2.cell(i+2, 2, row.get(yoy_month, 0))
            w2.sheet_state = "hidden"
            # formulas
            key_range = f"{prior_sheet}!$A:$A"
            val_range = f"{prior_sheet}!$B:$B"
            for r in range(first_data_row, last_data_row+1):
                key_addr = ws.cell(r, key_col_idx).coordinate
                cur = ws.cell(r, col_index[yoy_month]).coordinate
                prior_expr = f"INDEX({val_range},MATCH({key_addr},{key_range},0))"
                ws.cell(r, col_index[f"Prior {yoy_month}"]).value = f"=IFERROR({prior_expr},\"\")"
                ws.cell(r, col_index[f"Diff YoY {yoy_month}"]).value = f"=IFERROR({cur}-{prior_expr},\"\")"
                ws.cell(r, col_index[f"YoY {yoy_month}"]).value = (
                    f"=IFERROR(IF({prior_expr}=\"\",\"N/A\",IF(AND({prior_expr}=0,{cur}=0),0,IF(AND({prior_expr}=0,{cur}>0),\"N/A\",({cur}-{prior_expr})/{prior_expr}))),\"N/A\")"
                )
            # formats
            for r in range(first_data_row, last_data_row+1):
                ws.cell(r, col_index[f"YoY {yoy_month}"]).number_format = "0.0%"
                ws.cell(r, col_index[f"Prior {yoy_month}"]).number_format = "#,##0"
                ws.cell(r, col_index[f"Diff YoY {yoy_month}"]).number_format = "#,##0"

        # value-only YoY (Job Function)
        elif value_only:
            prior_sheet = f"_{sheet_name}_PRIOR"
            w2 = wb.create_sheet(prior_sheet)
            w2.cell(1,1,"KEY").font = Font(bold=True); w2.cell(1,2,"PRIOR").font = Font(bold=True)

            key_cols = dims_disp
            key_col_idx = len(headers) + 1
            ws.cell(header_row, key_col_idx, "_KEY").font = Font(bold=True)
            for r in range(first_data_row, last_data_row+1):
                parts = [ws.cell(r, col_index[k]).coordinate for k in key_cols]
                ws.cell(r, key_col_idx).value = f'={("&\"|\"&").join(parts)}'
            ws.column_dimensions[ws.cell(header_row, key_col_idx).column_letter].hidden = True

            prior = prior_df.copy()
            keep = [c for c in ["entity_name","subquestion","worker_category","job_function","value"] if c in prior.columns]
            prior = prior[keep].groupby([c for c in keep if c!="value"], dropna=False)["value"].sum().reset_index()
            prior = _rename_dims_for_display(prior)
            prior["Institution"] = prior["Entity / Group"]
            for i,row in prior.iterrows():
                key = "|".join(str(row.get(k,"")) for k in key_cols)
                w2.cell(i+2,1,key); w2.cell(i+2,2,row.get("value",0))
            w2.sheet_state = "hidden"

            key_range = f"{prior_sheet}!$A:$A"
            val_range = f"{prior_sheet}!$B:$B"
            for r in range(first_data_row, last_data_row+1):
                key_addr = ws.cell(r, key_col_idx).coordinate
                cur = ws.cell(r, col_index["Value"]).coordinate
                prior_expr = f"INDEX({val_range},MATCH({key_addr},{key_range},0))"
                ws.cell(r, col_index["Prior"]).value = f"=IFERROR({prior_expr},\"\")"
                ws.cell(r, col_index["Diff YoY"]).value = f"=IFERROR({cur}-{prior_expr},\"\")"
                ws.cell(r, col_index["YoY"]).value = f"=IFERROR(IF({prior_expr}=\"\",\"N/A\",IF(AND({prior_expr}=0,{cur}=0),0,IF(AND({prior_expr}=0,{cur}>0),\"N/A\",({cur}-{prior_expr})/{prior_expr}))),\"N/A\")"
            for r in range(first_data_row, last_data_row+1):
                ws.cell(r, col_index["YoY"]).number_format = "0.0%"
                ws.cell(r, col_index["Prior"]).number_format = "#,##0"
                ws.cell(r, col_index["Diff YoY"]).number_format = "#,##0"

        # quarter YoY is already handled in the previous version (unchanged)

    # Formats & conditional formatting
    # percents
    for h,c in col_index.items():
        if h.startswith("MoM ") or h.startswith("%Diff ") or h.startswith("YoY "):
            for r in range(first_data_row,last_data_row+1):
                ws.cell(r, c).number_format = "0.0%"

    # numbers
    for h,c in col_index.items():
        if (has_months and h in months_to_show) or h.startswith("Diff ") or (value_only and h in ["Value","Prior","Diff YoY"]):
            for r in range(first_data_row,last_data_row+1):
                ws.cell(r, c).number_format = "#,##0"

    # totals row
    totals_row = last_data_row + 2
    ws.cell(totals_row, 1, "TOTALS (visible rows)").font = Font(bold=True)
    for h,c in col_index.items():
        if (has_months and h in months_to_show) or h.startswith("Diff ") or h.startswith("MoM ") or h.startswith("%Diff ") or h.startswith("YoY ") or h in ["Value","Prior","Diff YoY"]:
            ws.cell(totals_row, c).value = f"=SUBTOTAL(9,{ws.cell(first_data_row,c).coordinate}:{ws.cell(last_data_row,c).coordinate})"
            ws.cell(totals_row, c).font = Font(bold=True)

    # freeze, filter, table
    ws.freeze_panes = ws.cell(first_data_row, len(dims_disp)+1)
    ws.auto_filter.ref = f"A{header_row}:{ws.cell(last_data_row, len(headers)).coordinate}"
    tbl = Table(displayName=sheet_name.replace(" ","_"), ref=f"A{header_row}:{ws.cell(last_data_row, len(headers)).coordinate}")
    tbl.tableStyleInfo = TableStyleInfo(name="TableStyleLight9", showRowStripes=True, showColumnStripes=False)
    ws.add_table(tbl)

    # Conditional formatting (tunable)
    # MoM
    for h,c in col_index.items():
        if not h.startswith("MoM "): continue
        m = h.replace("MoM ","",1)
        diff_h = f"Diff {m}"
        if diff_h not in col_index: continue
        lc = ws.cell(1, c).column_letter
        ld = ws.cell(1, col_index[diff_h]).column_letter
        rng = f"{lc}{first_data_row}:{lc}{last_data_row}"
        red = f"=AND(ISNUMBER({lc}{first_data_row}),ABS({lc}{first_data_row})>={mom_pct_threshold},ABS({ld}{first_data_row})>={abs_cutoff})"
        yel = f"=AND(ISNUMBER({lc}{first_data_row}),ABS({lc}{first_data_row})>={mom_pct_threshold},ABS({ld}{first_data_row})<{abs_cutoff})"
        ws.conditional_formatting.add(rng, FormulaRule(formula=[red], fill=FILL_RED))
        ws.conditional_formatting.add(rng, FormulaRule(formula=[yel], fill=FILL_YELLOW))

    # QoQ
    for h,c in col_index.items():
        if not h.startswith("%Diff "): continue
        qlbl = h.replace("%Diff ","",1)
        diff_h = f"Diff {qlbl}"
        if diff_h not in col_index: continue
        lc = ws.cell(1, c).column_letter
        ld = ws.cell(1, col_index[diff_h]).column_letter
        rng = f"{lc}{first_data_row}:{lc}{last_data_row}"
        red = f"=AND(ISNUMBER({lc}{first_data_row}),ABS({lc}{first_data_row})>={qoq_pct_threshold},ABS({ld}{first_data_row})>={abs_cutoff})"
        yel = f"=AND(ISNUMBER({lc}{first_data_row}),ABS({lc}{first_data_row})>={qoq_pct_threshold},ABS({ld}{first_data_row})<{abs_cutoff})"
        ws.conditional_formatting.add(rng, FormulaRule(formula=[red], fill=FILL_RED))
        ws.conditional_formatting.add(rng, FormulaRule(formula=[yel], fill=FILL_YELLOW))

    # YoY highlight (single-month and value-only)
    yoy_targets = []
    if yoy_month:
        yoy_targets.append((f"YoY {yoy_month}", f"Diff YoY {yoy_month}"))
    elif value_only and ("YoY" in col_index) and ("Diff YoY" in col_index):
        yoy_targets.append(("YoY","Diff YoY"))

    for yo, di in yoy_targets:
        lc = ws.cell(1, col_index[yo]).column_letter
        ld = ws.cell(1, col_index[di]).column_letter
        rng = f"{lc}{first_data_row}:{lc}{last_data_row}"
        red = f"=AND(ISNUMBER({lc}{first_data_row}),ABS({lc}{first_data_row})>={yoy_pct_threshold},ABS({ld}{first_data_row})>={abs_cutoff})"
        yel = f"=AND(ISNUMBER({lc}{first_data_row}),ABS({lc}{first_data_row})>={yoy_pct_threshold},ABS({ld}{first_data_row})<{abs_cutoff})"
        ws.conditional_formatting.add(rng, FormulaRule(formula=[red], fill=FILL_RED))
        ws.conditional_formatting.add(rng, FormulaRule(formula=[yel], fill=FILL_YELLOW))

def new_empty_workbook() -> Workbook:
    wb = Workbook()
    wb.remove(wb.active)
    return wb

def append_about_sheet_last(wb: Workbook, title: str, year: int, qlabel: str) -> None:
    about = wb.create_sheet("About")
    about["A1"] = title
    about["A2"] = "Year";          about["B2"] = year
    about["A3"] = "Up to Quarter"; about["B3"] = qlabel
    about["A4"] = "Generated at";  about["B4"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
