# =============================================================================

# qc_q1.py

# =============================================================================

from **future** import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import (
new_empty_workbook, append_about_sheet_last, write_qc_sheet,
normalize_quarter_label, MONTHS_FULL
)

def months_in_df(df: pd.DataFrame) -> list:
return [m for m in MONTHS_FULL if m in df.columns]

def main() -> int:
ap = argparse.ArgumentParser(description=“QC for Question 1”)
ap.add_argument(”–stage”, required=True)
ap.add_argument(”–out”, required=True)
ap.add_argument(”–prior-stage”, default=None)
ap.add_argument(”–year”, type=int, default=None)
args = ap.parse_args()

```
stage = Path(args.stage)
try:
    df = pd.read_excel(stage, sheet_name="Q1", engine="openpyxl")
    print(f"[INFO] Loaded {len(df)} rows from Q1")
except Exception as e:
    print(f"[WARN] Q1 sheet not found: {e}")
    return 0

year = int(args.year if args.year is not None else df["year"].mode().iat[0])
current_q = normalize_quarter_label(df["quarter"])
df = df[df["year"] == year].copy()
print(f"[INFO] Processing year {year}, quarter {current_q}")

prior_df = None
if args.prior_stage:
    try:
        prev = pd.read_excel(Path(args.prior_stage), sheet_name="Q1", engine="openpyxl")
        prior_df = prev[prev["year"] == (year - 1)].copy()
        print(f"[INFO] Loaded {len(prior_df)} prior year rows")
    except Exception as e:
        print(f"[WARN] Prior data not available: {e}")

wb = new_empty_workbook()
write_qc_sheet(
    wb, "QC_Q1", df,
    include_job_function=False,
    months_to_show=months_in_df(df),
    current_q=current_q, year=year, prior_df=prior_df
)
append_about_sheet_last(wb, "RLMS – QC (Q1)", year, current_q)

out_path = Path(args.out)
out_path.parent.mkdir(parents=True, exist_ok=True)
if "Sheet" in wb.sheetnames:
    del wb["Sheet"]
wb.save(str(out_path))
print(f"[DONE] {out_path}")
return 0
```

if **name** == “**main**”:
raise SystemExit(main())

# =============================================================================

# qc_q2.py

# =============================================================================

from **future** import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import (
new_empty_workbook, append_about_sheet_last, write_qc_sheet,
normalize_quarter_label, MONTHS_FULL
)

def months_in_df(df: pd.DataFrame) -> list:
return [m for m in MONTHS_FULL if m in df.columns]

def main() -> int:
ap = argparse.ArgumentParser(description=“QC for Question 2”)
ap.add_argument(”–stage”, required=True)
ap.add_argument(”–out”, required=True)
ap.add_argument(”–prior-stage”, default=None)
ap.add_argument(”–year”, type=int, default=None)
args = ap.parse_args()

```
stage = Path(args.stage)
try:
    df = pd.read_excel(stage, sheet_name="Q2", engine="openpyxl")
    print(f"[INFO] Loaded {len(df)} rows from Q2")
except Exception as e:
    print(f"[WARN] Q2 sheet not found: {e}")
    return 0

year = int(args.year if args.year is not None else df["year"].mode().iat[0])
current_q = normalize_quarter_label(df["quarter"])
df = df[df["year"] == year].copy()
print(f"[INFO] Processing year {year}, quarter {current_q}")

prior_df = None
if args.prior_stage:
    try:
        prev = pd.read_excel(Path(args.prior_stage), sheet_name="Q2", engine="openpyxl")
        prior_df = prev[prev["year"] == (year - 1)].copy()
        print(f"[INFO] Loaded {len(prior_df)} prior year rows")
    except Exception as e:
        print(f"[WARN] Prior data not available: {e}")

wb = new_empty_workbook()
write_qc_sheet(
    wb, "QC_Q2", df,
    include_job_function=False,
    months_to_show=months_in_df(df),
    current_q=current_q, year=year, prior_df=prior_df
)
append_about_sheet_last(wb, "RLMS – QC (Q2)", year, current_q)

out_path = Path(args.out)
out_path.parent.mkdir(parents=True, exist_ok=True)
if "Sheet" in wb.sheetnames:
    del wb["Sheet"]
wb.save(str(out_path))
print(f"[DONE] {out_path}")
return 0
```

if **name** == “**main**”:
raise SystemExit(main())

# =============================================================================

# qc_q3.py

# =============================================================================

from **future** import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import (
new_empty_workbook, append_about_sheet_last, write_qc_sheet,
normalize_quarter_label, MONTHS_FULL
)

def months_in_df(df: pd.DataFrame) -> list:
return [m for m in MONTHS_FULL if m in df.columns]

def main() -> int:
ap = argparse.ArgumentParser(description=“QC for Question 3”)
ap.add_argument(”–stage”, required=True)
ap.add_argument(”–out”, required=True)
ap.add_argument(”–prior-stage”, default=None)
ap.add_argument(”–year”, type=int, default=None)
args = ap.parse_args()

```
stage = Path(args.stage)
try:
    df = pd.read_excel(stage, sheet_name="Q3", engine="openpyxl")
    print(f"[INFO] Loaded {len(df)} rows from Q3")
except Exception as e:
    print(f"[WARN] Q3 sheet not found: {e}")
    return 0

year = int(args.year if args.year is not None else df["year"].mode().iat[0])
current_q = normalize_quarter_label(df["quarter"])
df = df[df["year"] == year].copy()
print(f"[INFO] Processing year {year}, quarter {current_q}")

prior_df = None
if args.prior_stage:
    try:
        prev = pd.read_excel(Path(args.prior_stage), sheet_name="Q3", engine="openpyxl")
        prior_df = prev[prev["year"] == (year - 1)].copy()
        print(f"[INFO] Loaded {len(prior_df)} prior year rows")
    except Exception as e:
        print(f"[WARN] Prior data not available: {e}")

wb = new_empty_workbook()
write_qc_sheet(
    wb, "QC_Q3", df,
    include_job_function=False,
    months_to_show=months_in_df(df),
    current_q=current_q, year=year, prior_df=prior_df
)
append_about_sheet_last(wb, "RLMS – QC (Q3)", year, current_q)

out_path = Path(args.out)
out_path.parent.mkdir(parents=True, exist_ok=True)
if "Sheet" in wb.sheetnames:
    del wb["Sheet"]
wb.save(str(out_path))
print(f"[DONE] {out_path}")
return 0
```

if **name** == “**main**”:
raise SystemExit(main())

# =============================================================================

# qc_q4.py

# =============================================================================

from **future** import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import (
new_empty_workbook, append_about_sheet_last, write_qc_sheet,
normalize_quarter_label, MONTHS_FULL
)

def months_in_df(df: pd.DataFrame) -> list:
return [m for m in MONTHS_FULL if m in df.columns]

def main() -> int:
ap = argparse.ArgumentParser(description=“QC for Question 4”)
ap.add_argument(”–stage”, required=True)
ap.add_argument(”–out”, required=True)
ap.add_argument(”–prior-stage”, default=None)
ap.add_argument(”–year”, type=int, default=None)
args = ap.parse_args()

```
stage = Path(args.stage)
try:
    df = pd.read_excel(stage, sheet_name="Q4", engine="openpyxl")
    print(f"[INFO] Loaded {len(df)} rows from Q4")
except Exception as e:
    print(f"[WARN] Q4 sheet not found: {e}")
    return 0

year = int(args.year if args.year is not None else df["year"].mode().iat[0])
current_q = normalize_quarter_label(df["quarter"])
df = df[df["year"] == year].copy()
print(f"[INFO] Processing year {year}, quarter {current_q}")

prior_df = None
if args.prior_stage:
    try:
        prev = pd.read_excel(Path(args.prior_stage), sheet_name="Q4", engine="openpyxl")
        prior_df = prev[prev["year"] == (year - 1)].copy()
        print(f"[INFO] Loaded {len(prior_df)} prior year rows")
    except Exception as e:
        print(f"[WARN] Prior data not available: {e}")

wb = new_empty_workbook()

# Q4 includes job function breakdown
write_qc_sheet(
    wb, "QC_Q4", df,
    include_job_function=True,
    months_to_show=months_in_df(df),
    current_q=current_q, year=year, prior_df=prior_df
)
append_about_sheet_last(wb, "RLMS – QC (Q4)", year, current_q)

out_path = Path(args.out)
out_path.parent.mkdir(parents=True, exist_ok=True)
if "Sheet" in wb.sheetnames:
    del wb["Sheet"]
wb.save(str(out_path))
print(f"[DONE] {out_path}")
return 0
```

if **name** == “**main**”:
raise SystemExit(main())

# =============================================================================

# qc_q5.py

# =============================================================================

from **future** import annotations
import argparse
from pathlib import Path
import pandas as pd
from qc_common import (
new_empty_workbook, append_about_sheet_last, write_qc_sheet,
normalize_quarter_label, MONTHS_FULL
)

def months_in_df(df: pd.DataFrame) -> list:
return [m for m in MONTHS_FULL if m in df.columns]

def main() -> int:
ap = argparse.ArgumentParser(description=“QC for Question 5”)
ap.add_argument(”–stage”, required=True)
ap.add_argument(”–out”, required=True)
ap.add_argument(”–prior-stage”, default=None)
ap.add_argument(”–year”, type=int, default=None)
args = ap.parse_args()

```
stage = Path(args.stage)
try:
    df = pd.read_excel(stage, sheet_name="Q5", engine="openpyxl")
    print(f"[INFO] Loaded {len(df)} rows from Q5")
except Exception as e:
    print(f"[WARN] Q5 sheet not found: {e}")
    return 0

year = int(args.year if args.year is not None else df["year"].mode().iat[0])
current_q = normalize_quarter_label(df["quarter"])
df = df[df["year"] == year].copy()
print(f"[INFO] Processing year {year}, quarter {current_q}")

prior_df = None
if args.prior_stage:
    try:
        prev = pd.read_excel(Path(args.prior_stage), sheet_name="Q5", engine="openpyxl")
        prior_df = prev[prev["year"] == (year - 1)].copy()
        print(f"[INFO] Loaded {len(prior_df)} prior year rows")
    except Exception as e:
        print(f"[WARN] Prior data not available: {e}")

wb = new_empty_workbook()
write_qc_sheet(
    wb, "QC_Q5", df,
    include_job_function=False,
    months_to_show=months_in_df(df),
    current_q=current_q, year=year, prior_df=prior_df
)
append_about_sheet_last(wb, "RLMS – QC (Q5)", year, current_q)

out_path = Path(args.out)
out_path.parent.mkdir(parents=True, exist_ok=True)
if "Sheet" in wb.sheetnames:
    del wb["Sheet"]
wb.save(str(out_path))
print(f"[DONE] {out_path}")
return 0
```

if **name** == “**main**”:
raise SystemExit(main())
