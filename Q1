# extract_q1.py
from __future__ import annotations
import argparse, time
from pathlib import Path
from typing import List, Tuple
import pandas as pd
from openpyxl import load_workbook

# =========================
# Helpers
# =========================

def read_num(ws, addr: str) -> float:
    v = ws[addr].value
    if v in (None, "", "-", "â€“"):
        return 0.0
    try:
        return float(str(v).replace(",", ""))
    except Exception:
        return 0.0

# =========================
# Q1A MAIN
# =========================

def extract_q1a_main(ws, ent: str, yr: int, q: str) -> pd.DataFrame:
    months = ["Oct", "Nov", "Dec"] if q in ("Q4","Quarter 4") else \
             ["Jul", "Aug", "Sep"] if q in ("Q3","Quarter 3") else \
             ["Apr", "May", "Jun"] if q in ("Q2","Quarter 2") else \
             ["Jan", "Feb", "Mar"]

    blocks = {
        "A. Malaysian": (30, 35),
        "B(i) Non-Malaysian: Permanent Resident": (38, 43),
        "B(ii) Non-Malaysian: Non-Permanent Resident": (46, 51),
    }

    worker_categories = [
        "Managers","Professional","Technicians & Associate Professionals",
        "Clerical Occupations","Operative Workers","Elementary Occupations"
    ]

    rows = []
    for subq, (r1, r2) in blocks.items():
        for i, wc in enumerate(worker_categories):
            r = r1 + i
            rec = {
                "entity_name": ent,
                "year": yr,
                "quarter": q,
                "subquestion": subq,
                "worker_category": wc,
                months[0]: read_num(ws, f"C{r}"),
                months[1]: read_num(ws, f"D{r}"),
                months[2]: read_num(ws, f"E{r}"),
            }
            rows.append(rec)
    return pd.DataFrame(rows)

# =========================
# Q1A JOB FUNCTION (Q4 only)
# =========================

def extract_q1a_jobfunc_q4(ws, ent: str, yr: int, q: str) -> pd.DataFrame:
    if q not in ("Q4","Quarter 4"):
        return pd.DataFrame()

    worker_rows = {
        "Managers": 15,
        "Professional": 17,
        "Technicians & Associate Professionals": 19,
        "Clerical Occupations": 21,
        "Operative Workers": 23,
        "Elementary Occupations": 25,
    }

    job_funcs = [
        "Banking Operations","Compliance","Corporate Banking","Credit Management",
        "Digital Banking & Innovation","Finance","Human Resources","Information Technology",
        "Internal Audit","Investment Banking","Legal","Retail Banking","Risk Management",
        "Sales and Marketing","Shariah","Treasury","Other functions"
    ]

    cols = [chr(c) for c in range(ord("K"), ord("A")+27)]  # K..AA

    rows = []
    for wc, r in worker_rows.items():
        for jf, col in zip(job_funcs, cols):
            rec = {
                "entity_name": ent,
                "year": yr,
                "quarter": q,
                "worker_category": wc,
                "job_function": jf,
                "value": read_num(ws, f"{col}{r}"),
            }
            rows.append(rec)
    return pd.DataFrame(rows)

# =========================
# Q1B (Islamic ops)
# =========================

def extract_q1b(ws, ent: str, yr: int, q: str) -> pd.DataFrame:
    if q not in ("Q2","Quarter 2","Q4","Quarter 4"):
        return pd.DataFrame()

    blocks = {
        "A. Malaysian": (65, 70),
        "B(i) Non-Malaysian: Permanent Resident": (73, 78),
        "B(ii) Non-Malaysian: Non-Permanent Resident": (81, 86),
    }

    worker_categories = [
        "Managers","Professional","Technicians & Associate Professionals",
        "Clerical Occupations","Operative Workers","Elementary Occupations"
    ]

    # Only one month (Jun for Q2, Dec for Q4)
    month = "Jun" if q in ("Q2","Quarter 2") else "Dec"

    rows = []
    for subq, (r1, r2) in blocks.items():
        for i, wc in enumerate(worker_categories):
            r = r1 + i
            rec = {
                "entity_name": ent,
                "year": yr,
                "quarter": q,
                "subquestion": subq,
                "worker_category": wc,
                month: read_num(ws, f"E{r}"),
            }
            rows.append(rec)
    return pd.DataFrame(rows)

# =========================
# FILE DRIVER
# =========================

def extract_from_file(path: Path) -> Tuple[pd.DataFrame,pd.DataFrame,pd.DataFrame]:
    try:
        wb = load_workbook(path, data_only=True)
    except Exception:
        return (pd.DataFrame(),pd.DataFrame(),pd.DataFrame())

    ws = wb.active
    ent = ws["C6"].value
    yr  = ws["C7"].value
    q   = ws["C8"].value

    a = extract_q1a_main(ws, ent, yr, q)
    jf = extract_q1a_jobfunc_q4(ws, ent, yr, q)
    b = extract_q1b(ws, ent, yr, q)

    wb.close()
    return a,jf,b

# =========================
# CLI
# =========================

def main() -> int:
    ap = argparse.ArgumentParser()
    ap.add_argument("--input", required=True)
    ap.add_argument("--out", required=True)
    args = ap.parse_args()

    root = Path(args.input)
    files = list(root.glob("*.xlsx"))
    rows_a, rows_jf, rows_b = [],[],[]

    t0 = time.time()
    for p in files:
        a,jf,b = extract_from_file(p)
        if not a.empty: rows_a.append(a)
        if not jf.empty: rows_jf.append(jf)
        if not b.empty: rows_b.append(b)

    df_a = pd.concat(rows_a, ignore_index=True) if rows_a else pd.DataFrame()
    df_jf = pd.concat(rows_jf, ignore_index=True) if rows_jf else pd.DataFrame()
    df_b = pd.concat(rows_b, ignore_index=True) if rows_b else pd.DataFrame()

    with pd.ExcelWriter(args.out, engine="openpyxl") as xw:
        if not df_a.empty: df_a.to_excel(xw, index=False, sheet_name="Q1A_Main")
        if not df_jf.empty: df_jf.to_excel(xw, index=False, sheet_name="Q1A_JobFunc_Q4")
        if not df_b.empty: df_b.to_excel(xw, index=False, sheet_name="Q1B")

    print(f"[DONE] {args.out} in {time.time()-t0:.2f}s")
    return 0

if __name__=="__main__":
    raise SystemExit(main())
