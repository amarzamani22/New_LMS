from pathlib import Path
from typing import List, Dict, Any
import argparse
import pandas as pd
from openpyxl import load_workbook

# ----------------------------
# Config
# ----------------------------
Q1_MONTH_COLS = ["C", "D", "E"]
MONTHS_BY_Q = {
    "Quarter 1": ["Jan", "Feb", "Mar"],
    "Quarter 2": ["Apr", "May", "Jun"],
    "Quarter 3": ["Jul", "Aug", "Sep"],
    "Quarter 4": ["Oct", "Nov", "Dec"],
    "Q1": ["Jan", "Feb", "Mar"],
    "Q2": ["Apr", "May", "Jun"],
    "Q3": ["Jul", "Aug", "Sep"],
    "Q4": ["Oct", "Nov", "Dec"],
}

WORKER_ROWS = {
    15: "Managers",
    17: "Professional",
    19: "Technicians & Associate Professionals",
    21: "Clerical Occupations",
    23: "Operative Workers",
    25: "Elementary Occupations",
    27: "TOTAL Employment",
}

SUBQUESTIONS_Q1A = {
    "Employment = A + B(i) + B(ii)": list(WORKER_ROWS.keys()),
    "A. Malaysian": [29, 30, 31, 32, 33, 34],
    "B(i) Non-Malaysian: Permanent Resident": [37, 38, 39, 40, 41, 42],
    "B(ii) Non-Malaysian: Non-Permanent Resident": [45, 46, 47, 48, 49, 50],
}
SUBQUESTIONS_Q1B = {
    "Employment = A + B(i) + B(ii)": [57, 58, 59, 60, 61, 62],
    "A. Malaysian": [65, 66, 67, 68, 69, 70],
    "B(i) Non-Malaysian: Permanent Resident": [73, 74, 75, 76, 77, 78],
    "B(ii) Non-Malaysian: Non-Permanent Resident": [81, 82, 83, 84, 85, 86],
}

# ----------------------------
# Helpers
# ----------------------------
def read_cover_meta(wb) -> Dict[str, Any]:
    ws = wb["Cover"]
    return {
        "entity": ws["F6"].value,
        "year": int(ws["F7"].value),
        "quarter_label": str(ws["F8"].value).strip(),
    }

def read_number(ws, addr: str) -> float:
    v = ws[addr].value
    return float(v) if isinstance(v, (int, float)) else 0.0

def col_letter(idx: int) -> str:
    letters = ""
    while idx > 0:
        idx, rem = divmod(idx - 1, 26)
        letters = chr(65 + rem) + letters
    return letters

# ----------------------------
# Extractor
# ----------------------------
def extract_q1(path: Path) -> Dict[str, pd.DataFrame]:
    wb = load_workbook(path, data_only=True)
    meta = read_cover_meta(wb)
    ws = wb["Banking & DFI"]

    quarter = meta["quarter_label"]
    has_q4 = quarter in ("Q4", "Quarter 4")
    months = MONTHS_BY_Q.get(quarter, [])

    base_cols = ["entity_name", "year", "quarter", "question", "Subquestion", "worker_category"]
    if has_q4:
        base_cols += ["job_function"]
    cols = base_cols + months

    # ---- Q1A
    rows = []
    for subq_label, row_nums in SUBQUESTIONS_Q1A.items():
        for r in row_nums:
            wc_label = ws[f"A{r}"].value
            if not wc_label:
                continue
            row = {
                "entity_name": meta["entity"],
                "year": meta["year"],
                "quarter": quarter,
                "question": "Q1A",
                "Subquestion": subq_label,
                "worker_category": wc_label,
            }
            if has_q4:
                row["job_function"] = ""
            for m, col in zip(months, Q1_MONTH_COLS):
                row[m] = read_number(ws, f"{col}{r}")
            rows.append(row)
    df_q1a = pd.DataFrame(rows, columns=cols)

    # ---- Q1B
    rows = []
    for subq_label, row_nums in SUBQUESTIONS_Q1B.items():
        for r in row_nums:
            wc_label = ws[f"A{r}"].value
            if not wc_label:
                continue
            row = {
                "entity_name": meta["entity"],
                "year": meta["year"],
                "quarter": quarter,
                "question": "Q1B",
                "Subquestion": subq_label,
                "worker_category": wc_label,
            }
            if has_q4:
                row["job_function"] = ""
            for m, col in zip(months, Q1_MONTH_COLS):
                row[m] = read_number(ws, f"{col}{r}")
            rows.append(row)
    df_q1b = pd.DataFrame(rows, columns=cols)

    return {"Q1A": df_q1a, "Q1B": df_q1b}

# ----------------------------
# Runner (CLI)
# ----------------------------
def main():
    ap = argparse.ArgumentParser(description="Extract Q1A & Q1B into staging Excel")
    ap.add_argument("--input", required=True, help="Input submission .xlsx file")
    ap.add_argument("--output", required=True, help="Output staging .xlsx file")
    args = ap.parse_args()

    dfs = extract_q1(Path(args.input))
    with pd.ExcelWriter(args.output, engine="openpyxl") as writer:
        for sheet, df in dfs.items():
            df.to_excel(writer, index=False, sheet_name=sheet)

    print(f"[DONE] Extracted Q1A & Q1B â†’ {args.output}")

if __name__ == "__main__":
    main()
